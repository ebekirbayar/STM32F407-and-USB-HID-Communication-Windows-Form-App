
ProjeSon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a554  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a770  0800a770  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a778  0800a778  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a778  0800a778  0001a778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a77c  0800a77c  0001a77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800a780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
 10 .bss          00000c60  2000010c  2000010c  0002010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d6c  20000d6c  0002010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bb04  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d30  00000000  00000000  0003bc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018e0  00000000  00000000  0003f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001367  00000000  00000000  00041298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002620d  00000000  00000000  000425ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fe38  00000000  00000000  0006880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0143  00000000  00000000  00088644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a74  00000000  00000000  00168788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0016f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6c4 	.word	0x0800a6c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	0800a6c4 	.word	0x0800a6c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 80004ce:	f107 020f 	add.w	r2, r7, #15
 80004d2:	1df9      	adds	r1, r7, #7
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2301      	movs	r3, #1
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <RC522_SPI_Transfer+0x28>)
 80004dc:	f004 fe7f 	bl	80051de <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200001c4 	.word	0x200001c4

080004f0 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2110      	movs	r1, #16
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <Write_MFRC522+0x48>)
 8000506:	f001 fefd 	bl	8002304 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffd4 	bl	80004c4 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffd0 	bl	80004c4 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2110      	movs	r1, #16
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <Write_MFRC522+0x48>)
 800052a:	f001 feeb 	bl	8002304 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020000 	.word	0x40020000

0800053c <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2110      	movs	r1, #16
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <Read_MFRC522+0x4c>)
 800054c:	f001 feda 	bl	8002304 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	b25b      	sxtb	r3, r3
 8000556:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800055a:	b25b      	sxtb	r3, r3
 800055c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffad 	bl	80004c4 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ffaa 	bl	80004c4 <RC522_SPI_Transfer>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <Read_MFRC522+0x4c>)
 800057a:	f001 fec3 	bl	8002304 <HAL_GPIO_WritePin>
	return val;	
 800057e:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020000 	.word	0x40020000

0800058c <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffcc 	bl	800053c <Read_MFRC522>
 80005a4:	4603      	mov	r3, r0
 80005a6:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff9b 	bl	80004f0 <Write_MFRC522>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	460a      	mov	r2, r1
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	4613      	mov	r3, r2
 80005d0:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffb1 	bl	800053c <Read_MFRC522>
 80005da:	4603      	mov	r3, r0
 80005dc:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80005de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005e2:	43db      	mvns	r3, r3
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff7b 	bl	80004f0 <Write_MFRC522>
} 
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 8000606:	2014      	movs	r0, #20
 8000608:	f7ff ff98 	bl	800053c <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 800060c:	2103      	movs	r1, #3
 800060e:	2014      	movs	r0, #20
 8000610:	f7ff ffbc 	bl	800058c <SetBitMask>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800061c:	210f      	movs	r1, #15
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff66 	bl	80004f0 <Write_MFRC522>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MFRC522_Init+0x54>)
 8000632:	f001 fe67 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <MFRC522_Init+0x58>)
 800063c:	f001 fe62 	bl	8002304 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 8000640:	f7ff ffea 	bl	8000618 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8000644:	218d      	movs	r1, #141	; 0x8d
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f7ff ff52 	bl	80004f0 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800064c:	213e      	movs	r1, #62	; 0x3e
 800064e:	202b      	movs	r0, #43	; 0x2b
 8000650:	f7ff ff4e 	bl	80004f0 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8000654:	211e      	movs	r1, #30
 8000656:	202d      	movs	r0, #45	; 0x2d
 8000658:	f7ff ff4a 	bl	80004f0 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800065c:	2100      	movs	r1, #0
 800065e:	202c      	movs	r0, #44	; 0x2c
 8000660:	f7ff ff46 	bl	80004f0 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	2015      	movs	r0, #21
 8000668:	f7ff ff42 	bl	80004f0 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 800066c:	213d      	movs	r1, #61	; 0x3d
 800066e:	2011      	movs	r0, #17
 8000670:	f7ff ff3e 	bl	80004f0 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8000674:	f7ff ffc5 	bl	8000602 <AntennaOn>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400

08000684 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	4613      	mov	r3, r2
 8000694:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8000696:	2302      	movs	r3, #2
 8000698:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b0c      	cmp	r3, #12
 80006a6:	d006      	beq.n	80006b6 <MFRC522_ToCard+0x32>
 80006a8:	2b0e      	cmp	r3, #14
 80006aa:	d109      	bne.n	80006c0 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 80006ac:	2312      	movs	r3, #18
 80006ae:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80006b0:	2310      	movs	r3, #16
 80006b2:	777b      	strb	r3, [r7, #29]
			break;
 80006b4:	e005      	b.n	80006c2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 80006b6:	2377      	movs	r3, #119	; 0x77
 80006b8:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80006ba:	2330      	movs	r3, #48	; 0x30
 80006bc:	777b      	strb	r3, [r7, #29]
			break;
 80006be:	e000      	b.n	80006c2 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80006c0:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 80006c2:	7fbb      	ldrb	r3, [r7, #30]
 80006c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	2002      	movs	r0, #2
 80006ce:	f7ff ff0f 	bl	80004f0 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	2004      	movs	r0, #4
 80006d6:	f7ff ff74 	bl	80005c2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	200a      	movs	r0, #10
 80006de:	f7ff ff55 	bl	800058c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff03 	bl	80004f0 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e00a      	b.n	8000706 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2009      	movs	r0, #9
 80006fc:	f7ff fef8 	bl	80004f0 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	3301      	adds	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	429a      	cmp	r2, r3
 800070c:	d3f0      	bcc.n	80006f0 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	4619      	mov	r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff feec 	bl	80004f0 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b0c      	cmp	r3, #12
 800071c:	d103      	bne.n	8000726 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	200d      	movs	r0, #13
 8000722:	f7ff ff33 	bl	800058c <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8000726:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800072a:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800072c:	2004      	movs	r0, #4
 800072e:	f7ff ff05 	bl	800053c <Read_MFRC522>
 8000732:	4603      	mov	r3, r0
 8000734:	773b      	strb	r3, [r7, #28]
        i--;
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	3b01      	subs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00a      	beq.n	8000758 <MFRC522_ToCard+0xd4>
 8000742:	7f3b      	ldrb	r3, [r7, #28]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d105      	bne.n	8000758 <MFRC522_ToCard+0xd4>
 800074c:	7f3a      	ldrb	r2, [r7, #28]
 800074e:	7f7b      	ldrb	r3, [r7, #29]
 8000750:	4013      	ands	r3, r2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0e9      	beq.n	800072c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	200d      	movs	r0, #13
 800075c:	f7ff ff31 	bl	80005c2 <ClearBitMask>
	
    if (i != 0)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d052      	beq.n	800080c <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000766:	2006      	movs	r0, #6
 8000768:	f7ff fee8 	bl	800053c <Read_MFRC522>
 800076c:	4603      	mov	r3, r0
 800076e:	f003 031b 	and.w	r3, r3, #27
 8000772:	2b00      	cmp	r3, #0
 8000774:	d148      	bne.n	8000808 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800077a:	7f3a      	ldrb	r2, [r7, #28]
 800077c:	7fbb      	ldrb	r3, [r7, #30]
 800077e:	4013      	ands	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 800078a:	2301      	movs	r3, #1
 800078c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	d13b      	bne.n	800080c <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000794:	200a      	movs	r0, #10
 8000796:	f7ff fed1 	bl	800053c <Read_MFRC522>
 800079a:	4603      	mov	r3, r0
 800079c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800079e:	200c      	movs	r0, #12
 80007a0:	f7ff fecc 	bl	800053c <Read_MFRC522>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d008      	beq.n	80007c4 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 80007b2:	7f3b      	ldrb	r3, [r7, #28]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	00da      	lsls	r2, r3, #3
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	4413      	add	r3, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e004      	b.n	80007ce <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 80007c4:	7f3b      	ldrb	r3, [r7, #28]
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	461a      	mov	r2, r3
 80007ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007cc:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007ce:	7f3b      	ldrb	r3, [r7, #28]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 80007d4:	2301      	movs	r3, #1
 80007d6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80007d8:	7f3b      	ldrb	r3, [r7, #28]
 80007da:	2b10      	cmp	r3, #16
 80007dc:	d901      	bls.n	80007e2 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 80007de:	2310      	movs	r3, #16
 80007e0:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	e00a      	b.n	80007fe <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	18d4      	adds	r4, r2, r3
 80007ee:	2009      	movs	r0, #9
 80007f0:	f7ff fea4 	bl	800053c <Read_MFRC522>
 80007f4:	4603      	mov	r3, r0
 80007f6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	3301      	adds	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	7f3b      	ldrb	r3, [r7, #28]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	429a      	cmp	r2, r3
 8000804:	d3f0      	bcc.n	80007e8 <MFRC522_ToCard+0x164>
 8000806:	e001      	b.n	800080c <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000808:	2302      	movs	r3, #2
 800080a:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 800080c:	7ffb      	ldrb	r3, [r7, #31]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd90      	pop	{r4, r7, pc}

08000816 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af02      	add	r7, sp, #8
 800081c:	4603      	mov	r3, r0
 800081e:	6039      	str	r1, [r7, #0]
 8000820:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000822:	2107      	movs	r1, #7
 8000824:	200d      	movs	r0, #13
 8000826:	f7ff fe63 	bl	80004f0 <Write_MFRC522>
	
	TagType[0] = reqMode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	200c      	movs	r0, #12
 800083e:	f7ff ff21 	bl	8000684 <MFRC522_ToCard>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <MFRC522_Request+0x3c>
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2b10      	cmp	r3, #16
 8000850:	d001      	beq.n	8000856 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8000852:	2302      	movs	r3, #2
 8000854:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8000868:	2300      	movs	r3, #0
 800086a:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800086c:	2100      	movs	r1, #0
 800086e:	200d      	movs	r0, #13
 8000870:	f7ff fe3e 	bl	80004f0 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2293      	movs	r2, #147	; 0x93
 8000878:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	2220      	movs	r2, #32
 8000880:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2202      	movs	r2, #2
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff fef8 	bl	8000684 <MFRC522_ToCard>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d118      	bne.n	80008d0 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
 80008a2:	e009      	b.n	80008b8 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	4053      	eors	r3, r2
 80008b0:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9f2      	bls.n	80008a4 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	7b7a      	ldrb	r2, [r7, #13]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d001      	beq.n	80008d0 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 80008cc:	2302      	movs	r3, #2
 80008ce:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
} 
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008e2:	f000 fdcb 	bl	800147c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008e6:	f000 f94f 	bl	8000b88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ea:	f000 fb19 	bl	8000f20 <MX_GPIO_Init>
	MX_ADC1_Init();
 80008ee:	f000 f9b3 	bl	8000c58 <MX_ADC1_Init>
	MX_SPI1_Init();
 80008f2:	f000 fa31 	bl	8000d58 <MX_SPI1_Init>
	MX_TIM1_Init();
 80008f6:	f000 fa65 	bl	8000dc4 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 80008fa:	f009 fa37 	bl	8009d6c <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 80008fe:	f000 f9fd 	bl	8000cfc <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8000902:	f000 fae3 	bl	8000ecc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	MFRC522_Init();
 8000906:	f7ff fe8f 	bl	8000628 <MFRC522_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	488c      	ldr	r0, [pc, #560]	; (8000b40 <main+0x264>)
 800090e:	f004 ff43 	bl	8005798 <HAL_TIM_PWM_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 8000912:	488c      	ldr	r0, [pc, #560]	; (8000b44 <main+0x268>)
 8000914:	f000 fe8c 	bl	8001630 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000918:	2164      	movs	r1, #100	; 0x64
 800091a:	488a      	ldr	r0, [pc, #552]	; (8000b44 <main+0x268>)
 800091c:	f000 ff8d 	bl	800183a <HAL_ADC_PollForConversion>
		soundLevel = HAL_ADC_GetValue(&hadc1);
 8000920:	4888      	ldr	r0, [pc, #544]	; (8000b44 <main+0x268>)
 8000922:	f001 f815 	bl	8001950 <HAL_ADC_GetValue>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b87      	ldr	r3, [pc, #540]	; (8000b48 <main+0x26c>)
 800092c:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800092e:	4885      	ldr	r0, [pc, #532]	; (8000b44 <main+0x268>)
 8000930:	f000 ff50 	bl	80017d4 <HAL_ADC_Stop>

		USB_TX_Buffer[0] = LOWBYTE(soundLevel);
 8000934:	4b84      	ldr	r3, [pc, #528]	; (8000b48 <main+0x26c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <main+0x270>)
 800093c:	701a      	strb	r2, [r3, #0]
		USB_TX_Buffer[1] = HIGHBYTE(soundLevel);
 800093e:	4b82      	ldr	r3, [pc, #520]	; (8000b48 <main+0x26c>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b29b      	uxth	r3, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b80      	ldr	r3, [pc, #512]	; (8000b4c <main+0x270>)
 800094a:	705a      	strb	r2, [r3, #1]
		giden_data = 0;
 800094c:	4b80      	ldr	r3, [pc, #512]	; (8000b50 <main+0x274>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, soundData);
 8000952:	4b80      	ldr	r3, [pc, #512]	; (8000b54 <main+0x278>)
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	4b7a      	ldr	r3, [pc, #488]	; (8000b40 <main+0x264>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	635a      	str	r2, [r3, #52]	; 0x34

		status = MFRC522_Request(PICC_REQIDL, str);
 800095c:	497e      	ldr	r1, [pc, #504]	; (8000b58 <main+0x27c>)
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f7ff ff59 	bl	8000816 <MFRC522_Request>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b7c      	ldr	r3, [pc, #496]	; (8000b5c <main+0x280>)
 800096a:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 800096c:	487a      	ldr	r0, [pc, #488]	; (8000b58 <main+0x27c>)
 800096e:	f7ff ff77 	bl	8000860 <MFRC522_Anticoll>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b79      	ldr	r3, [pc, #484]	; (8000b5c <main+0x280>)
 8000978:	701a      	strb	r2, [r3, #0]
		memcpy(serNum, str, 5);
 800097a:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <main+0x284>)
 800097c:	4a76      	ldr	r2, [pc, #472]	; (8000b58 <main+0x27c>)
 800097e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000982:	6018      	str	r0, [r3, #0]
 8000984:	3304      	adds	r3, #4
 8000986:	7019      	strb	r1, [r3, #0]

		soundData = 0;
 8000988:	4b72      	ldr	r3, [pc, #456]	; (8000b54 <main+0x278>)
 800098a:	2200      	movs	r2, #0
 800098c:	801a      	strh	r2, [r3, #0]

		if (status == MI_OK) {
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <main+0x280>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f040 808d 	bne.w	8000ab2 <main+0x1d6>

			if ((serNum[0] == 195) || (serNum[1] == 179) || (serNum[2] == 192)
 8000998:	4b71      	ldr	r3, [pc, #452]	; (8000b60 <main+0x284>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2bc3      	cmp	r3, #195	; 0xc3
 800099e:	d00f      	beq.n	80009c0 <main+0xe4>
 80009a0:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <main+0x284>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2bb3      	cmp	r3, #179	; 0xb3
 80009a6:	d00b      	beq.n	80009c0 <main+0xe4>
 80009a8:	4b6d      	ldr	r3, [pc, #436]	; (8000b60 <main+0x284>)
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	2bc0      	cmp	r3, #192	; 0xc0
 80009ae:	d007      	beq.n	80009c0 <main+0xe4>
					|| (serNum[3] == 28) || (serNum[4] == 172)) {
 80009b0:	4b6b      	ldr	r3, [pc, #428]	; (8000b60 <main+0x284>)
 80009b2:	78db      	ldrb	r3, [r3, #3]
 80009b4:	2b1c      	cmp	r3, #28
 80009b6:	d003      	beq.n	80009c0 <main+0xe4>
 80009b8:	4b69      	ldr	r3, [pc, #420]	; (8000b60 <main+0x284>)
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	2bac      	cmp	r3, #172	; 0xac
 80009be:	d119      	bne.n	80009f4 <main+0x118>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c6:	4867      	ldr	r0, [pc, #412]	; (8000b64 <main+0x288>)
 80009c8:	f001 fc9c 	bl	8002304 <HAL_GPIO_WritePin>
				USB_TX_Buffer[3] = 1;
 80009cc:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <main+0x270>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	70da      	strb	r2, [r3, #3]
				giden_data = 1;
 80009d2:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <main+0x274>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "Bekirhan", 8, 10);
 80009d8:	230a      	movs	r3, #10
 80009da:	2208      	movs	r2, #8
 80009dc:	4962      	ldr	r1, [pc, #392]	; (8000b68 <main+0x28c>)
 80009de:	4863      	ldr	r0, [pc, #396]	; (8000b6c <main+0x290>)
 80009e0:	f005 fc04 	bl	80061ec <HAL_UART_Transmit>
				soundData = soundLevel;
 80009e4:	4b58      	ldr	r3, [pc, #352]	; (8000b48 <main+0x26c>)
 80009e6:	881a      	ldrh	r2, [r3, #0]
 80009e8:	4b5a      	ldr	r3, [pc, #360]	; (8000b54 <main+0x278>)
 80009ea:	801a      	strh	r2, [r3, #0]
				HAL_Delay(100);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f000 fdb7 	bl	8001560 <HAL_Delay>
 80009f2:	e05e      	b.n	8000ab2 <main+0x1d6>
			} else if ((str[0] == 35) || (str[1] == 67) || (str[2] == 252)
 80009f4:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <main+0x27c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b23      	cmp	r3, #35	; 0x23
 80009fa:	d00f      	beq.n	8000a1c <main+0x140>
 80009fc:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <main+0x27c>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	2b43      	cmp	r3, #67	; 0x43
 8000a02:	d00b      	beq.n	8000a1c <main+0x140>
 8000a04:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <main+0x27c>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	2bfc      	cmp	r3, #252	; 0xfc
 8000a0a:	d007      	beq.n	8000a1c <main+0x140>
					|| (str[3] == 174) || (str[4] == 50)) {
 8000a0c:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <main+0x27c>)
 8000a0e:	78db      	ldrb	r3, [r3, #3]
 8000a10:	2bae      	cmp	r3, #174	; 0xae
 8000a12:	d003      	beq.n	8000a1c <main+0x140>
 8000a14:	4b50      	ldr	r3, [pc, #320]	; (8000b58 <main+0x27c>)
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	2b32      	cmp	r3, #50	; 0x32
 8000a1a:	d119      	bne.n	8000a50 <main+0x174>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	4850      	ldr	r0, [pc, #320]	; (8000b64 <main+0x288>)
 8000a24:	f001 fc6e 	bl	8002304 <HAL_GPIO_WritePin>
				USB_TX_Buffer[3] = 2;
 8000a28:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <main+0x270>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	70da      	strb	r2, [r3, #3]
				giden_data = 1;
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <main+0x274>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "Mert", 4, 10);
 8000a34:	230a      	movs	r3, #10
 8000a36:	2204      	movs	r2, #4
 8000a38:	494d      	ldr	r1, [pc, #308]	; (8000b70 <main+0x294>)
 8000a3a:	484c      	ldr	r0, [pc, #304]	; (8000b6c <main+0x290>)
 8000a3c:	f005 fbd6 	bl	80061ec <HAL_UART_Transmit>
				soundData = soundLevel;
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <main+0x26c>)
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <main+0x278>)
 8000a46:	801a      	strh	r2, [r3, #0]
				HAL_Delay(100);
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f000 fd89 	bl	8001560 <HAL_Delay>
 8000a4e:	e030      	b.n	8000ab2 <main+0x1d6>
			} else if ((str[0] == 64) || (str[1] == 68) || (str[2] == 91)
 8000a50:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <main+0x27c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b40      	cmp	r3, #64	; 0x40
 8000a56:	d00f      	beq.n	8000a78 <main+0x19c>
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <main+0x27c>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	2b44      	cmp	r3, #68	; 0x44
 8000a5e:	d00b      	beq.n	8000a78 <main+0x19c>
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <main+0x27c>)
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	2b5b      	cmp	r3, #91	; 0x5b
 8000a66:	d007      	beq.n	8000a78 <main+0x19c>
					|| (str[3] == 10) || (str[4] == 85)) {
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <main+0x27c>)
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	2b0a      	cmp	r3, #10
 8000a6e:	d003      	beq.n	8000a78 <main+0x19c>
 8000a70:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <main+0x27c>)
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	2b55      	cmp	r3, #85	; 0x55
 8000a76:	d119      	bne.n	8000aac <main+0x1d0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	4839      	ldr	r0, [pc, #228]	; (8000b64 <main+0x288>)
 8000a80:	f001 fc40 	bl	8002304 <HAL_GPIO_WritePin>
				USB_TX_Buffer[3] = 3;
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x270>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	70da      	strb	r2, [r3, #3]
				giden_data = 1;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <main+0x274>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "Samed", 5, 10);
 8000a90:	230a      	movs	r3, #10
 8000a92:	2205      	movs	r2, #5
 8000a94:	4937      	ldr	r1, [pc, #220]	; (8000b74 <main+0x298>)
 8000a96:	4835      	ldr	r0, [pc, #212]	; (8000b6c <main+0x290>)
 8000a98:	f005 fba8 	bl	80061ec <HAL_UART_Transmit>
				soundData = soundLevel;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <main+0x26c>)
 8000a9e:	881a      	ldrh	r2, [r3, #0]
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <main+0x278>)
 8000aa2:	801a      	strh	r2, [r3, #0]
				HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	; 0x64
 8000aa6:	f000 fd5b 	bl	8001560 <HAL_Delay>
 8000aaa:	e002      	b.n	8000ab2 <main+0x1d6>
			} else {
				USB_TX_Buffer[3] = 0;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <main+0x270>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	70da      	strb	r2, [r3, #3]
			}
		}

		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USB_TX_Buffer, 64);
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	4925      	ldr	r1, [pc, #148]	; (8000b4c <main+0x270>)
 8000ab6:	4830      	ldr	r0, [pc, #192]	; (8000b78 <main+0x29c>)
 8000ab8:	f007 fcd6 	bl	8008468 <USBD_CUSTOM_HID_SendReport>

		if (USB_RX_Buffer[0] == 1) {
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <main+0x2a0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10d      	bne.n	8000ae0 <main+0x204>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <main+0x288>)
 8000acc:	f001 fc1a 	bl	8002304 <HAL_GPIO_WritePin>
			soundData = soundLevel;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <main+0x26c>)
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <main+0x278>)
 8000ad6:	801a      	strh	r2, [r3, #0]
			giden_data = 1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <main+0x274>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e005      	b.n	8000aec <main+0x210>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	481f      	ldr	r0, [pc, #124]	; (8000b64 <main+0x288>)
 8000ae8:	f001 fc0c 	bl	8002304 <HAL_GPIO_WritePin>
		}

		if (USB_RX_Buffer[1] == 1) {
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <main+0x2a0>)
 8000aee:	785b      	ldrb	r3, [r3, #1]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10d      	bne.n	8000b10 <main+0x234>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	481a      	ldr	r0, [pc, #104]	; (8000b64 <main+0x288>)
 8000afc:	f001 fc02 	bl	8002304 <HAL_GPIO_WritePin>
			soundData = soundLevel;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <main+0x26c>)
 8000b02:	881a      	ldrh	r2, [r3, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <main+0x278>)
 8000b06:	801a      	strh	r2, [r3, #0]
			HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fd29 	bl	8001560 <HAL_Delay>
 8000b0e:	e005      	b.n	8000b1c <main+0x240>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <main+0x288>)
 8000b18:	f001 fbf4 	bl	8002304 <HAL_GPIO_WritePin>
		}
		HAL_I2C_Master_Receive(&hi2c1, 0x37 << 1, &gelen_data, 1, 100);
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <main+0x2a4>)
 8000b24:	216e      	movs	r1, #110	; 0x6e
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <main+0x2a8>)
 8000b28:	f001 fe48 	bl	80027bc <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Transmit(&hi2c1, 0x37 << 1, &giden_data, 1, 100);
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2301      	movs	r3, #1
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <main+0x274>)
 8000b34:	216e      	movs	r1, #110	; 0x6e
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <main+0x2a8>)
 8000b38:	f001 fd42 	bl	80025c0 <HAL_I2C_Master_Transmit>
		HAL_ADC_Start(&hadc1);
 8000b3c:	e6e9      	b.n	8000912 <main+0x36>
 8000b3e:	bf00      	nop
 8000b40:	2000021c 	.word	0x2000021c
 8000b44:	20000128 	.word	0x20000128
 8000b48:	2000032e 	.word	0x2000032e
 8000b4c:	200002ec 	.word	0x200002ec
 8000b50:	2000034a 	.word	0x2000034a
 8000b54:	2000032c 	.word	0x2000032c
 8000b58:	20000334 	.word	0x20000334
 8000b5c:	20000330 	.word	0x20000330
 8000b60:	20000344 	.word	0x20000344
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	0800a6dc 	.word	0x0800a6dc
 8000b6c:	20000264 	.word	0x20000264
 8000b70:	0800a6e8 	.word	0x0800a6e8
 8000b74:	0800a6f0 	.word	0x0800a6f0
 8000b78:	20000354 	.word	0x20000354
 8000b7c:	200002ac 	.word	0x200002ac
 8000b80:	20000349 	.word	0x20000349
 8000b84:	20000170 	.word	0x20000170

08000b88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 fd68 	bl	800a66c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000bfc:	2360      	movs	r3, #96	; 0x60
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fdc5 	bl	800479c <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x94>
		Error_Handler();
 8000c18:	f000 fa1a 	bl	8001050 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f827 	bl	8004c8c <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xc0>
		Error_Handler();
 8000c44:	f000 fa04 	bl	8001050 <Error_Handler>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <MX_ADC1_Init+0x9c>)
 8000c6e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_ADC1_Init+0xa0>)
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000cb8:	f000 fc76 	bl	80015a8 <HAL_ADC_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000cc2:	f000 f9c5 	bl	8001050 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC1_Init+0x98>)
 8000cd8:	f000 fe48 	bl	800196c <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8000ce2:	f000 f9b5 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000128 	.word	0x20000128
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	0f000001 	.word	0x0f000001

08000cfc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x58>)
 8000d0a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d3a:	f001 fafd 	bl	8002338 <HAL_I2C_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d44:	f000 f984 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000170 	.word	0x20000170
 8000d50:	40005400 	.word	0x40005400
 8000d54:	000186a0 	.word	0x000186a0

08000d58 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d68:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d8c:	2228      	movs	r2, #40	; 0x28
 8000d8e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000da4:	220a      	movs	r2, #10
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_SPI1_Init+0x64>)
 8000daa:	f004 f98f 	bl	80050cc <HAL_SPI_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000db4:	f000 f94c 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001c4 	.word	0x200001c4
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b092      	sub	sp, #72	; 0x48
 8000dc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
 8000de6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2220      	movs	r2, #32
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f009 fc3c 	bl	800a66c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000df6:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <MX_TIM1_Init+0x104>)
 8000df8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000dfa:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000dfc:	222f      	movs	r2, #47	; 0x2f
 8000dfe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4095 - 1;
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e0c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000e20:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e22:	f004 fc69 	bl	80056f8 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8000e2c:	f000 f910 	bl	8001050 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e40:	f005 f8b6 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000e4a:	f000 f901 	bl	8001050 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000e74:	f004 fd58 	bl	8005928 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8000e7e:	f000 f8e7 	bl	8001050 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000ea6:	f005 f8ff 	bl	80060a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000eb0:	f000 f8ce 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM1_Init+0x100>)
 8000eb6:	f000 f9ef 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000eba:	bf00      	nop
 8000ebc:	3748      	adds	r7, #72	; 0x48
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000021c 	.word	0x2000021c
 8000ec8:	40010000 	.word	0x40010000

08000ecc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f005 f922 	bl	800614c <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f0e:	f000 f89f 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000264 	.word	0x20000264
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a39      	ldr	r2, [pc, #228]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_GPIO_Init+0x120>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_GPIO_Init+0x120>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <MX_GPIO_Init+0x120>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_GPIO_Init+0x120>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_GPIO_Init+0x124>)
 8000fc8:	f001 f99c 	bl	8002304 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2101      	movs	r1, #1
 8000fd0:	481d      	ldr	r0, [pc, #116]	; (8001048 <MX_GPIO_Init+0x128>)
 8000fd2:	f001 f997 	bl	8002304 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fdc:	481b      	ldr	r0, [pc, #108]	; (800104c <MX_GPIO_Init+0x12c>)
 8000fde:	f001 f991 	bl	8002304 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <MX_GPIO_Init+0x124>)
 8000ffa:	f000 ffe7 	bl	8001fcc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x128>)
 8001016:	f000 ffd9 	bl	8001fcc <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800101a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800101e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_GPIO_Init+0x12c>)
 8001034:	f000 ffca 	bl	8001fcc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020c00 	.word	0x40020c00

08001050 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d127      	bne.n	800111e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_ADC_MspInit+0x84>)
 800111a:	f000 ff57 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	; 0xc0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001182:	2304      	movs	r3, #4
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <HAL_I2C_MspInit+0x8c>)
 800118e:	f000 ff1d 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_I2C_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_SPI_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12b      	bne.n	800123e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_SPI_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_SPI_MspInit+0x88>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_SPI_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800121e:	23e0      	movs	r3, #224	; 0xe0
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122e:	2305      	movs	r3, #5
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 800123a:	f000 fec7 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40013000 	.word	0x40013000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_TIM_PWM_MspInit+0x3c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10d      	bne.n	8001282 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_TIM_PWM_MspInit+0x40>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_TIM_PWM_MspInit+0x40>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_TIM_PWM_MspInit+0x40>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40010000 	.word	0x40010000
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_TIM_MspPostInit+0x68>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11e      	bne.n	80012f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_TIM_MspPostInit+0x70>)
 80012f4:	f000 fe6a 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40010000 	.word	0x40010000
 8001304:	40023800 	.word	0x40023800
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_UART_MspInit+0x84>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d12b      	bne.n	8001386 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001366:	230c      	movs	r3, #12
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UART_MspInit+0x8c>)
 8001382:	f000 fe23 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f89a 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <OTG_FS_IRQHandler+0x10>)
 80013f6:	f002 f8dd 	bl	80035b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000830 	.word	0x20000830

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800142c:	f7ff ffea 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	; (8001474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f009 f911 	bl	800a67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fa3f 	bl	80008dc <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800146c:	0800a780 	.word	0x0800a780
  ldr r2, =_sbss
 8001470:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001474:	20000d6c 	.word	0x20000d6c

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 fd4f 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fdd4 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fd67 	bl	8001fb2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 fd2f 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	2000034c 	.word	0x2000034c

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000034c 	.word	0x2000034c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e033      	b.n	8001626 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fd70 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ee:	f023 0302 	bic.w	r3, r3, #2
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fad8 	bl	8001bb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
 8001616:	e001      	b.n	800161c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_ADC_Start+0x1a>
 8001646:	2302      	movs	r3, #2
 8001648:	e0b2      	b.n	80017b0 <HAL_ADC_Start+0x180>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d018      	beq.n	8001692 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_ADC_Start+0x18c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_ADC_Start+0x190>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9a      	lsrs	r2, r3, #18
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001684:	e002      	b.n	800168c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d17a      	bne.n	8001796 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d106      	bne.n	80016ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f023 0206 	bic.w	r2, r3, #6
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_ADC_Start+0x194>)
 80016fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001708:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2b00      	cmp	r3, #0
 8001714:	d12a      	bne.n	800176c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_ADC_Start+0x198>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d015      	beq.n	800174c <HAL_ADC_Start+0x11c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a29      	ldr	r2, [pc, #164]	; (80017cc <HAL_ADC_Start+0x19c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d105      	bne.n	8001736 <HAL_ADC_Start+0x106>
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_ADC_Start+0x194>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_ADC_Start+0x1a0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d136      	bne.n	80017ae <HAL_ADC_Start+0x17e>
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_ADC_Start+0x194>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d130      	bne.n	80017ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d129      	bne.n	80017ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	e020      	b.n	80017ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_ADC_Start+0x198>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11b      	bne.n	80017ae <HAL_ADC_Start+0x17e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d114      	bne.n	80017ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e00b      	b.n	80017ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f043 0210 	orr.w	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000000 	.word	0x20000000
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	40012300 	.word	0x40012300
 80017c8:	40012000 	.word	0x40012000
 80017cc:	40012100 	.word	0x40012100
 80017d0:	40012200 	.word	0x40012200

080017d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Stop+0x16>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e021      	b.n	800182e <HAL_ADC_Stop+0x5a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001856:	d113      	bne.n	8001880 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001866:	d10b      	bne.n	8001880 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e063      	b.n	8001948 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fe62 	bl	8001548 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001886:	e021      	b.n	80018cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188e:	d01d      	beq.n	80018cc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_ADC_PollForConversion+0x6c>
 8001896:	f7ff fe57 	bl	8001548 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d212      	bcs.n	80018cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d00b      	beq.n	80018cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f043 0204 	orr.w	r2, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e03d      	b.n	8001948 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d1d6      	bne.n	8001888 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f06f 0212 	mvn.w	r2, #18
 80018e2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d123      	bne.n	8001946 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d11f      	bne.n	8001946 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800191e:	2b00      	cmp	r3, #0
 8001920:	d111      	bne.n	8001946 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1c>
 8001984:	2302      	movs	r3, #2
 8001986:	e105      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x228>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d925      	bls.n	80019e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	3b1e      	subs	r3, #30
 80019ae:	2207      	movs	r2, #7
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68d9      	ldr	r1, [r3, #12]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4403      	add	r3, r0
 80019d6:	3b1e      	subs	r3, #30
 80019d8:	409a      	lsls	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	e022      	b.n	8001a2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6919      	ldr	r1, [r3, #16]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	2207      	movs	r2, #7
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	400a      	ands	r2, r1
 8001a06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4403      	add	r3, r0
 8001a20:	409a      	lsls	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d824      	bhi.n	8001a7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	3b05      	subs	r3, #5
 8001a44:	221f      	movs	r2, #31
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	400a      	ands	r2, r1
 8001a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b05      	subs	r3, #5
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7a:	e04c      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d824      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b23      	subs	r3, #35	; 0x23
 8001a96:	221f      	movs	r2, #31
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b23      	subs	r3, #35	; 0x23
 8001ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
 8001acc:	e023      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b41      	subs	r3, #65	; 0x41
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	400a      	ands	r2, r1
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	3b41      	subs	r3, #65	; 0x41
 8001b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_ADC_ConfigChannel+0x234>)
 8001b18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_ADC_ConfigChannel+0x238>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1cc>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_ADC_ConfigChannel+0x238>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d123      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x21e>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x1e6>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b11      	cmp	r3, #17
 8001b50:	d11b      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_ADC_ConfigChannel+0x23c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_ADC_ConfigChannel+0x240>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0c9a      	lsrs	r2, r3, #18
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	431bde83 	.word	0x431bde83

08001bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <ADC_Init+0x1f0>)
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	021a      	lsls	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <ADC_Init+0x1f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e00f      	b.n	8001cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0202 	bic.w	r2, r2, #2
 8001cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e1b      	ldrb	r3, [r3, #24]
 8001cc8:	005a      	lsls	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	035a      	lsls	r2, r3, #13
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e007      	b.n	8001d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	051a      	lsls	r2, r3, #20
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d66:	025a      	lsls	r2, r3, #9
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	029a      	lsls	r2, r3, #10
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40012300 	.word	0x40012300
 8001da4:	0f000001 	.word	0x0f000001

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	; (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff3e 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff31 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e16b      	b.n	80022c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 815a 	bne.w	80022ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80b4 	beq.w	80022ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <HAL_GPIO_Init+0x30c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_GPIO_Init+0x30c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_GPIO_Init+0x30c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a5b      	ldr	r2, [pc, #364]	; (80022dc <HAL_GPIO_Init+0x310>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x314>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02b      	beq.n	80021f2 <HAL_GPIO_Init+0x226>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_GPIO_Init+0x318>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x222>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_GPIO_Init+0x31c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x21e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x320>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_GPIO_Init+0x324>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x328>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x32c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_GPIO_Init+0x330>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x20a>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e00e      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021d6:	2308      	movs	r3, #8
 80021d8:	e00c      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021da:	2306      	movs	r3, #6
 80021dc:	e00a      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021de:	2305      	movs	r3, #5
 80021e0:	e008      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x228>
 80021f2:	2300      	movs	r3, #0
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002204:	4935      	ldr	r1, [pc, #212]	; (80022dc <HAL_GPIO_Init+0x310>)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_GPIO_Init+0x334>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_GPIO_Init+0x334>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_GPIO_Init+0x334>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <HAL_GPIO_Init+0x334>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_GPIO_Init+0x334>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_GPIO_Init+0x334>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_GPIO_Init+0x334>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_GPIO_Init+0x334>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	f67f ae90 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40021400 	.word	0x40021400
 80022f8:	40021800 	.word	0x40021800
 80022fc:	40021c00 	.word	0x40021c00
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e12b      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fee8 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800239c:	f002 fe6e 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80023a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a81      	ldr	r2, [pc, #516]	; (80025ac <HAL_I2C_Init+0x274>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d807      	bhi.n	80023bc <HAL_I2C_Init+0x84>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a80      	ldr	r2, [pc, #512]	; (80025b0 <HAL_I2C_Init+0x278>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e006      	b.n	80023ca <HAL_I2C_Init+0x92>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a7d      	ldr	r2, [pc, #500]	; (80025b4 <HAL_I2C_Init+0x27c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0e7      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <HAL_I2C_Init+0x280>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9b      	lsrs	r3, r3, #18
 80023dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_I2C_Init+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d802      	bhi.n	800240c <HAL_I2C_Init+0xd4>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	e009      	b.n	8002420 <HAL_I2C_Init+0xe8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_I2C_Init+0x284>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	3301      	adds	r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	495c      	ldr	r1, [pc, #368]	; (80025ac <HAL_I2C_Init+0x274>)
 800243c:	428b      	cmp	r3, r1
 800243e:	d819      	bhi.n	8002474 <HAL_I2C_Init+0x13c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fbb1 f3f3 	udiv	r3, r1, r3
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002454:	400b      	ands	r3, r1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_I2C_Init+0x138>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e59      	subs	r1, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	e051      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002470:	2304      	movs	r3, #4
 8002472:	e04f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_I2C_Init+0x168>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e012      	b.n	80024c6 <HAL_I2C_Init+0x18e>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Init+0x196>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e022      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10e      	bne.n	80024f4 <HAL_I2C_Init+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e58      	subs	r0, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	e00f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6809      	ldr	r1, [r1, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6911      	ldr	r1, [r2, #16]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	000186a0 	.word	0x000186a0
 80025b0:	001e847f 	.word	0x001e847f
 80025b4:	003d08ff 	.word	0x003d08ff
 80025b8:	431bde83 	.word	0x431bde83
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
 80025d0:	4613      	mov	r3, r2
 80025d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7fe ffb8 	bl	8001548 <HAL_GetTick>
 80025d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	f040 80e0 	bne.w	80027a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2319      	movs	r3, #25
 80025ee:	2201      	movs	r2, #1
 80025f0:	4970      	ldr	r1, [pc, #448]	; (80027b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fc64 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	e0d3      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_I2C_Master_Transmit+0x50>
 800260c:	2302      	movs	r3, #2
 800260e:	e0cc      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d007      	beq.n	8002636 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2221      	movs	r2, #33	; 0x21
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2210      	movs	r2, #16
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	893a      	ldrh	r2, [r7, #8]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 face 	bl	8002c20 <I2C_MasterRequestWrite>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e08d      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026a4:	e066      	b.n	8002774 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fd22 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06b      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_I2C_Master_Transmit+0x188>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6a39      	ldr	r1, [r7, #32]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fd19 	bl	8003184 <I2C_WaitOnBTFFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e01a      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d194      	bne.n	80026a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	00100002 	.word	0x00100002
 80027b8:	ffff0000 	.word	0xffff0000

080027bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	461a      	mov	r2, r3
 80027c8:	460b      	mov	r3, r1
 80027ca:	817b      	strh	r3, [r7, #10]
 80027cc:	4613      	mov	r3, r2
 80027ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7fe feba 	bl	8001548 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b20      	cmp	r3, #32
 80027e0:	f040 8217 	bne.w	8002c12 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2319      	movs	r3, #25
 80027ea:	2201      	movs	r2, #1
 80027ec:	497c      	ldr	r1, [pc, #496]	; (80029e0 <HAL_I2C_Master_Receive+0x224>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fb66 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
 80027fc:	e20a      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_I2C_Master_Receive+0x50>
 8002808:	2302      	movs	r3, #2
 800280a:	e203      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d007      	beq.n	8002832 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002840:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2222      	movs	r2, #34	; 0x22
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2210      	movs	r2, #16
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	893a      	ldrh	r2, [r7, #8]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a5c      	ldr	r2, [pc, #368]	; (80029e4 <HAL_I2C_Master_Receive+0x228>)
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002874:	8979      	ldrh	r1, [r7, #10]
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa52 	bl	8002d24 <I2C_MasterRequestRead>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e1c4      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d113      	bne.n	80028ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e198      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d11b      	bne.n	80028fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e178      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d11b      	bne.n	800293a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002910:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	e158      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002960:	e144      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b03      	cmp	r3, #3
 8002968:	f200 80f1 	bhi.w	8002b4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	2b01      	cmp	r3, #1
 8002972:	d123      	bne.n	80029bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fc4b 	bl	8003214 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e145      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ba:	e117      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d14e      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	2200      	movs	r2, #0
 80029cc:	4906      	ldr	r1, [pc, #24]	; (80029e8 <HAL_I2C_Master_Receive+0x22c>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa76 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e11a      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
 80029de:	bf00      	nop
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000
 80029e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a60:	e0c4      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	496c      	ldr	r1, [pc, #432]	; (8002c1c <HAL_I2C_Master_Receive+0x460>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa27 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0cb      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4955      	ldr	r1, [pc, #340]	; (8002c1c <HAL_I2C_Master_Receive+0x460>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f9f9 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e09d      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b4c:	e04e      	b.n	8002bec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fb5e 	bl	8003214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e058      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d124      	bne.n	8002bec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f aeb6 	bne.w	8002962 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00010004 	.word	0x00010004

08002c20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d006      	beq.n	8002c4a <I2C_MasterRequestWrite+0x2a>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d003      	beq.n	8002c4a <I2C_MasterRequestWrite+0x2a>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c48:	d108      	bne.n	8002c5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e00b      	b.n	8002c74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	2b12      	cmp	r3, #18
 8002c62:	d107      	bne.n	8002c74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f91d 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9a:	d103      	bne.n	8002ca4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e035      	b.n	8002d14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d108      	bne.n	8002cc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb2:	897b      	ldrh	r3, [r7, #10]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	e01b      	b.n	8002cfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cc4:	897b      	ldrh	r3, [r7, #10]
 8002cc6:	11db      	asrs	r3, r3, #7
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f003 0306 	and.w	r3, r3, #6
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f063 030f 	orn	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <I2C_MasterRequestWrite+0xfc>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f966 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e010      	b.n	8002d14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <I2C_MasterRequestWrite+0x100>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f956 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	00010008 	.word	0x00010008
 8002d20:	00010002 	.word	0x00010002

08002d24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d006      	beq.n	8002d5e <I2C_MasterRequestRead+0x3a>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d003      	beq.n	8002d5e <I2C_MasterRequestRead+0x3a>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e00b      	b.n	8002d88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	2b11      	cmp	r3, #17
 8002d76:	d107      	bne.n	8002d88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f893 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dae:	d103      	bne.n	8002db8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e079      	b.n	8002eb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc4:	d108      	bne.n	8002dd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]
 8002dd6:	e05f      	b.n	8002e98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	11db      	asrs	r3, r3, #7
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f063 030f 	orn	r3, r3, #15
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4930      	ldr	r1, [pc, #192]	; (8002eb8 <I2C_MasterRequestRead+0x194>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8dc 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e054      	b.n	8002eb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4929      	ldr	r1, [pc, #164]	; (8002ebc <I2C_MasterRequestRead+0x198>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8cc 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e044      	b.n	8002eb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f831 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e72:	d103      	bne.n	8002e7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e017      	b.n	8002eb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	11db      	asrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0306 	and.w	r3, r3, #6
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f063 030e 	orn	r3, r3, #14
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <I2C_MasterRequestRead+0x198>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f888 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	00010008 	.word	0x00010008
 8002ebc:	00010002 	.word	0x00010002

08002ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	e048      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d044      	beq.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fb35 	bl	8001548 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d139      	bne.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10d      	bne.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	e00c      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d116      	bne.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e023      	b.n	8002fac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10d      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	e00c      	b.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d093      	beq.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc2:	e071      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d123      	bne.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f043 0204 	orr.w	r2, r3, #4
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e067      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d041      	beq.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe fa90 	bl	8001548 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d136      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10c      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	e00b      	b.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e021      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10c      	bne.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e00b      	b.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f47f af6d 	bne.w	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	e034      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8e3 	bl	80032ce <I2C_IsAcknowledgeFailed>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e034      	b.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d028      	beq.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe fa15 	bl	8001548 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11d      	bne.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d016      	beq.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e007      	b.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b80      	cmp	r3, #128	; 0x80
 8003178:	d1c3      	bne.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003190:	e034      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f89b 	bl	80032ce <I2C_IsAcknowledgeFailed>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e034      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d028      	beq.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7fe f9cd 	bl	8001548 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11d      	bne.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d016      	beq.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d1c3      	bne.n	8003192 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003220:	e049      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d119      	bne.n	8003264 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0210 	mvn.w	r2, #16
 8003238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e030      	b.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe f970 	bl	8001548 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11d      	bne.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d016      	beq.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e007      	b.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d1ae      	bne.n	8003222 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d11b      	bne.n	800331e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0204 	orr.w	r2, r3, #4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e101      	b.n	8003542 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 fe85 	bl	800a068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336c:	d102      	bne.n	8003374 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fc0a 	bl	8006b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7c1a      	ldrb	r2, [r3, #16]
 8003386:	f88d 2000 	strb.w	r2, [sp]
 800338a:	3304      	adds	r3, #4
 800338c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338e:	f003 fae9 	bl	8006964 <USB_CoreInit>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0ce      	b.n	8003542 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fc02 	bl	8006bb4 <USB_SetCurrentMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0bf      	b.n	8003542 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	e04a      	b.n	800345e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3315      	adds	r3, #21
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3314      	adds	r3, #20
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	b298      	uxth	r0, r3
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	332e      	adds	r3, #46	; 0x2e
 8003404:	4602      	mov	r2, r0
 8003406:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3318      	adds	r3, #24
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	331c      	adds	r3, #28
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3320      	adds	r3, #32
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	3301      	adds	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	429a      	cmp	r2, r3
 8003466:	d3af      	bcc.n	80033c8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e044      	b.n	80034f8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	3301      	adds	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	791b      	ldrb	r3, [r3, #4]
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d3b5      	bcc.n	800346e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7c1a      	ldrb	r2, [r3, #16]
 800350a:	f88d 2000 	strb.w	r2, [sp]
 800350e:	3304      	adds	r3, #4
 8003510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003512:	f003 fb9b 	bl	8006c4c <USB_DevInit>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e00c      	b.n	8003542 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fbdf 	bl	8007cfe <USB_DevDisconnect>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_PCD_Start+0x1c>
 8003562:	2302      	movs	r3, #2
 8003564:	e022      	b.n	80035ac <HAL_PCD_Start+0x62>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 faec 	bl	8006b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 fb8d 	bl	8007cbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b08d      	sub	sp, #52	; 0x34
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 fc4b 	bl	8007e66 <USB_GetMode>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 848c 	bne.w	8003ef0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fbaf 	bl	8007d40 <USB_ReadInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8482 	beq.w	8003eee <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fb9c 	bl	8007d40 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d107      	bne.n	8003622 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f002 0202 	and.w	r2, r2, #2
 8003620:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fb8a 	bl	8007d40 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b10      	cmp	r3, #16
 8003634:	d161      	bne.n	80036fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	0c5b      	lsrs	r3, r3, #17
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	2b02      	cmp	r3, #2
 8003670:	d124      	bne.n	80036bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d035      	beq.n	80036ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368c:	b29b      	uxth	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	6a38      	ldr	r0, [r7, #32]
 8003692:	f004 f9c1 	bl	8007a18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a2:	441a      	add	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b4:	441a      	add	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	615a      	str	r2, [r3, #20]
 80036ba:	e016      	b.n	80036ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	0c5b      	lsrs	r3, r3, #17
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d110      	bne.n	80036ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036ce:	2208      	movs	r2, #8
 80036d0:	4619      	mov	r1, r3
 80036d2:	6a38      	ldr	r0, [r7, #32]
 80036d4:	f004 f9a0 	bl	8007a18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e4:	441a      	add	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0210 	orr.w	r2, r2, #16
 80036f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 fb1e 	bl	8007d40 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800370e:	f040 80a7 	bne.w	8003860 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f004 fb23 	bl	8007d66 <USB_ReadDevAllOutEpInterrupt>
 8003720:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003722:	e099      	b.n	8003858 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 808e 	beq.w	800384c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f004 fb47 	bl	8007dce <USB_ReadDevOutEPInterrupt>
 8003740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003758:	461a      	mov	r2, r3
 800375a:	2301      	movs	r3, #1
 800375c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800375e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fe89 	bl	8004478 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	2308      	movs	r3, #8
 8003780:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 ff5f 	bl	8004648 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	2310      	movs	r3, #16
 80037a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d030      	beq.n	8003812 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d109      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	78db      	ldrb	r3, [r3, #3]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d108      	bne.n	8003800 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f006 fd3a 	bl	800a274 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	2302      	movs	r3, #2
 8003810:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	2320      	movs	r3, #32
 800382c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800384a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	3301      	adds	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	f47f af62 	bne.w	8003724 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fa6b 	bl	8007d40 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003874:	f040 80db 	bne.w	8003a2e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 fa8c 	bl	8007d9a <USB_ReadDevAllInEpInterrupt>
 8003882:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003888:	e0cd      	b.n	8003a26 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80c2 	beq.w	8003a1a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fab2 	bl	8007e0a <USB_ReadDevInEPInterrupt>
 80038a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d057      	beq.n	8003962 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	2201      	movs	r2, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69f9      	ldr	r1, [r7, #28]
 80038ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d2:	4013      	ands	r3, r2
 80038d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	461a      	mov	r2, r3
 80038e4:	2301      	movs	r3, #1
 80038e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	799b      	ldrb	r3, [r3, #6]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d132      	bne.n	8003956 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3320      	adds	r3, #32
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4403      	add	r3, r0
 8003910:	331c      	adds	r3, #28
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4419      	add	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4403      	add	r3, r0
 8003924:	3320      	adds	r3, #32
 8003926:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <HAL_PCD_IRQHandler+0x3a2>
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3324      	adds	r3, #36	; 0x24
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800394e:	461a      	mov	r2, r3
 8003950:	2101      	movs	r1, #1
 8003952:	f004 fab9 	bl	8007ec8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f006 fc04 	bl	800a16a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	461a      	mov	r2, r3
 800397a:	2308      	movs	r3, #8
 800397c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	2310      	movs	r3, #16
 8003998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	461a      	mov	r2, r3
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d023      	beq.n	8003a08 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c2:	6a38      	ldr	r0, [r7, #32]
 80039c4:	f003 faa6 	bl	8006f14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	3310      	adds	r3, #16
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	78db      	ldrb	r3, [r3, #3]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d108      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f006 fc51 	bl	800a298 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	461a      	mov	r2, r3
 8003a04:	2302      	movs	r3, #2
 8003a06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fca3 	bl	8004360 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f47f af2e 	bne.w	800388a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f984 	bl	8007d40 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a42:	d122      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fe89 	bl	8004784 <HAL_PCDEx_LPM_Callback>
 8003a72:	e002      	b.n	8003a7a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f006 fbef 	bl	800a258 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f956 	bl	8007d40 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9e:	d112      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d102      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f006 fbab 	bl	800a20c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ac4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f938 	bl	8007d40 <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	f040 80b7 	bne.w	8003c4c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2110      	movs	r1, #16
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fa0b 	bl	8006f14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	e046      	b.n	8003b92 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b10:	461a      	mov	r2, r3
 8003b12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	461a      	mov	r2, r3
 8003b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b8a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	3301      	adds	r3, #1
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	791b      	ldrb	r3, [r3, #4]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d3b2      	bcc.n	8003b04 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7bdb      	ldrb	r3, [r3, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bca:	f043 030b 	orr.w	r3, r3, #11
 8003bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be0:	f043 030b 	orr.w	r3, r3, #11
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	e015      	b.n	8003c14 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003bfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f043 030b 	orr.w	r3, r3, #11
 8003c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f004 f946 	bl	8007ec8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 f875 	bl	8007d40 <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	d123      	bne.n	8003caa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 f90b 	bl	8007e82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 f9c8 	bl	8007006 <USB_GetDevSpeed>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681c      	ldr	r4, [r3, #0]
 8003c82:	f001 f9ef 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8003c86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f002 fecc 	bl	8006a2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f006 fa90 	bl	800a1ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 f846 	bl	8007d40 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f006 fa6d 	bl	800a19e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f002 0208 	and.w	r2, r2, #8
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 f831 	bl	8007d40 <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d123      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e014      	b.n	8003d24 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 faf0 	bl	80042fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	3301      	adds	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	791b      	ldrb	r3, [r3, #4]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d3e4      	bcc.n	8003cfa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 f803 	bl	8007d40 <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d44:	d13c      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d46:	2301      	movs	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e02b      	b.n	8003da4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d115      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da12      	bge.n	8003d9e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3317      	adds	r3, #23
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fab0 	bl	80042fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	3301      	adds	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	791b      	ldrb	r3, [r3, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d3cd      	bcc.n	8003d4c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 ffbb 	bl	8007d40 <USB_ReadInterrupts>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd4:	d156      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	e045      	b.n	8003e68 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d12e      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da2b      	bge.n	8003e62 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003e16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d121      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5e:	6053      	str	r3, [r2, #4]
            break;
 8003e60:	e008      	b.n	8003e74 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d3b3      	bcc.n	8003ddc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 ff59 	bl	8007d40 <USB_ReadInterrupts>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d10a      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f006 fa0e 	bl	800a2bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 ff43 	bl	8007d40 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d115      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f006 f9fe 	bl	800a2d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e000      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003eee:	bf00      	nop
    }
  }
}
 8003ef0:	3734      	adds	r7, #52	; 0x34
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}

08003ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_PCD_SetAddress+0x1a>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e012      	b.n	8003f36 <HAL_PCD_SetAddress+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fea2 	bl	8007c70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	70fb      	strb	r3, [r7, #3]
 8003f50:	460b      	mov	r3, r1
 8003f52:	803b      	strh	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da0f      	bge.n	8003f84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	3310      	adds	r3, #16
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	3304      	adds	r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	705a      	strb	r2, [r3, #1]
 8003f82:	e00f      	b.n	8003fa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 020f 	and.w	r2, r3, #15
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fb0:	883a      	ldrh	r2, [r7, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	78ba      	ldrb	r2, [r7, #2]
 8003fba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fce:	78bb      	ldrb	r3, [r7, #2]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d102      	bne.n	8003fda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_PCD_EP_Open+0xaa>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e00e      	b.n	8004006 <HAL_PCD_EP_Open+0xc8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 f82a 	bl	8007050 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004004:	7afb      	ldrb	r3, [r7, #11]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800401a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	da0f      	bge.n	8004042 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3310      	adds	r3, #16
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	705a      	strb	r2, [r3, #1]
 8004040:	e00f      	b.n	8004062 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_PCD_EP_Close+0x6e>
 8004078:	2302      	movs	r3, #2
 800407a:	e00e      	b.n	800409a <HAL_PCD_EP_Close+0x8c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	4618      	mov	r0, r3
 800408c:	f003 f868 	bl	8007160 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	460b      	mov	r3, r1
 80040b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	799b      	ldrb	r3, [r3, #6]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	799b      	ldrb	r3, [r3, #6]
 8004106:	461a      	mov	r2, r3
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	f003 f905 	bl	8007318 <USB_EPStartXfer>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	460b      	mov	r3, r1
 8004126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	3310      	adds	r3, #16
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2201      	movs	r2, #1
 8004156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	799b      	ldrb	r3, [r3, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	799b      	ldrb	r3, [r3, #6]
 800417a:	461a      	mov	r2, r3
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	f003 f8cb 	bl	8007318 <USB_EPStartXfer>

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	7912      	ldrb	r2, [r2, #4]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e04f      	b.n	800424a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0f      	bge.n	80041d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	3310      	adds	r3, #16
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	705a      	strb	r2, [r3, #1]
 80041d0:	e00d      	b.n	80041ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_EP_SetStall+0x82>
 800420a:	2302      	movs	r3, #2
 800420c:	e01d      	b.n	800424a <HAL_PCD_EP_SetStall+0xbe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	4618      	mov	r0, r3
 800421e:	f003 fc53 	bl	8007ac8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7999      	ldrb	r1, [r3, #6]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800423a:	461a      	mov	r2, r3
 800423c:	f003 fe44 	bl	8007ec8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	7912      	ldrb	r2, [r2, #4]
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e042      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0f      	bge.n	8004298 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3310      	adds	r3, #16
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	705a      	strb	r2, [r3, #1]
 8004296:	e00f      	b.n	80042b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_ClrStall+0x86>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e00e      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fc5c 	bl	8007ba4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800430a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da0c      	bge.n	800432c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3310      	adds	r3, #16
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e00c      	b.n	8004346 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f003 fa7b 	bl	8007848 <USB_EPStopXfer>
 8004352:	4603      	mov	r3, r0
 8004354:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004356:	7afb      	ldrb	r3, [r7, #11]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	3310      	adds	r3, #16
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	3304      	adds	r3, #4
 8004386:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	429a      	cmp	r2, r3
 8004392:	d901      	bls.n	8004398 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e06b      	b.n	8004470 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d902      	bls.n	80043b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3303      	adds	r3, #3
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043bc:	e02a      	b.n	8004414 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d902      	bls.n	80043da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3303      	adds	r3, #3
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68d9      	ldr	r1, [r3, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4603      	mov	r3, r0
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f003 fad0 	bl	800799c <USB_WritePacket>

    ep->xfer_buff  += len;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	441a      	add	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d809      	bhi.n	800443e <PCD_WriteEmptyTxFifo+0xde>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004432:	429a      	cmp	r2, r3
 8004434:	d203      	bcs.n	800443e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1bf      	bne.n	80043be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d811      	bhi.n	800446e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2201      	movs	r2, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	43db      	mvns	r3, r3
 8004464:	6939      	ldr	r1, [r7, #16]
 8004466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446a:	4013      	ands	r3, r2
 800446c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	333c      	adds	r3, #60	; 0x3c
 8004490:	3304      	adds	r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	799b      	ldrb	r3, [r3, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d17b      	bne.n	80045a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4a61      	ldr	r2, [pc, #388]	; (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f240 80b9 	bls.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80b3 	beq.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	e0a7      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2320      	movs	r3, #32
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	e098      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	f040 8093 	bne.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d90f      	bls.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	e07e      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	440b      	add	r3, r1
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d114      	bne.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004580:	461a      	mov	r2, r3
 8004582:	2101      	movs	r1, #1
 8004584:	f003 fca0 	bl	8007ec8 <USB_EP0_OutStart>
 8004588:	e006      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f005 fdc8 	bl	800a134 <HAL_PCD_DataOutStageCallback>
 80045a4:	e046      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d124      	bne.n	80045f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	e032      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2320      	movs	r3, #32
 80045e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f005 fd9f 	bl	800a134 <HAL_PCD_DataOutStageCallback>
 80045f6:	e01d      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004620:	461a      	mov	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	f003 fc50 	bl	8007ec8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f005 fd80 	bl	800a134 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	4f54300a 	.word	0x4f54300a
 8004644:	4f54310a 	.word	0x4f54310a

08004648 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	333c      	adds	r3, #60	; 0x3c
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d90e      	bls.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f005 fd37 	bl	800a110 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90c      	bls.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	799b      	ldrb	r3, [r3, #6]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d108      	bne.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f003 fc02 	bl	8007ec8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a

080046d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
 80046e0:	4613      	mov	r3, r2
 80046e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046f2:	883b      	ldrh	r3, [r7, #0]
 80046f4:	0419      	lsls	r1, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004700:	e028      	b.n	8004754 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e00d      	b.n	8004732 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	3340      	adds	r3, #64	; 0x40
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	3301      	adds	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	3b01      	subs	r3, #1
 8004738:	429a      	cmp	r2, r3
 800473a:	d3ec      	bcc.n	8004716 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800473c:	883b      	ldrh	r3, [r7, #0]
 800473e:	0418      	lsls	r0, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	3b01      	subs	r3, #1
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4302      	orrs	r2, r0
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e267      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d00c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d112      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b7e      	ldr	r3, [pc, #504]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e242      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a75      	ldr	r2, [pc, #468]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6f      	ldr	r2, [pc, #444]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6c      	ldr	r2, [pc, #432]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a68      	ldr	r2, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a65      	ldr	r2, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fc fe78 	bl	8001548 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485c:	f7fc fe74 	bl	8001548 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e207      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fc fe64 	bl	8001548 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fc fe60 	bl	8001548 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1f3      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d063      	beq.n	800497a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d11c      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d116      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e1c7      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4937      	ldr	r1, [pc, #220]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	e03a      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x244>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fc fe19 	bl	8001548 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800491a:	f7fc fe15 	bl	8001548 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e1a8      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4925      	ldr	r1, [pc, #148]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]
 800494c:	e015      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <HAL_RCC_OscConfig+0x244>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fc fdf8 	bl	8001548 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495c:	f7fc fdf4 	bl	8001548 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e187      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d036      	beq.n	80049f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_RCC_OscConfig+0x248>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fc fdd8 	bl	8001548 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499c:	f7fc fdd4 	bl	8001548 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e167      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
 80049ba:	e01b      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_OscConfig+0x248>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fc fdc1 	bl	8001548 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	e00e      	b.n	80049e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fc fdbd 	bl	8001548 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d907      	bls.n	80049e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e150      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	42470000 	.word	0x42470000
 80049e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ea      	bne.n	80049ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8097 	beq.w	8004b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a06:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	4b77      	ldr	r3, [pc, #476]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d118      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3e:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a73      	ldr	r2, [pc, #460]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4a:	f7fc fd7d 	bl	8001548 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fc fd79 	bl	8001548 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e10c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a63      	ldr	r2, [pc, #396]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	e01c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x30c>
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a5e      	ldr	r2, [pc, #376]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	4b5c      	ldr	r3, [pc, #368]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a5b      	ldr	r2, [pc, #364]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004aa8:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a57      	ldr	r2, [pc, #348]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab4:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a54      	ldr	r2, [pc, #336]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fc fd3e 	bl	8001548 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fc fd3a 	bl	8001548 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0cb      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ee      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x334>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af4:	f7fc fd28 	bl	8001548 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fc fd24 	bl	8001548 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0b5      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ee      	bne.n	8004afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a1 	beq.w	8004c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3a:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d05c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d141      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fc fcf8 	bl	8001548 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fc fcf4 	bl	8001548 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e087      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	491b      	ldr	r1, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fc fccd 	bl	8001548 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb2:	f7fc fcc9 	bl	8001548 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e05c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x416>
 8004bd0:	e054      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fcb6 	bl	8001548 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fc fcb2 	bl	8001548 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e045      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x444>
 8004bfe:	e03d      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e038      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_OscConfig+0x4ec>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d121      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0cc      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d90c      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b8      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf8:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	494d      	ldr	r1, [pc, #308]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d044      	beq.n	8004dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d119      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e06f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e067      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4934      	ldr	r1, [pc, #208]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fc fbe4 	bl	8001548 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d84:	f7fc fbe0 	bl	8001548 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e04f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 020c 	and.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d1eb      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d20c      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e12:	f000 f821 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490a      	ldr	r1, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc fb44 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800a758 	.word	0x0800a758
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b094      	sub	sp, #80	; 0x50
 8004e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	2300      	movs	r3, #0
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	2300      	movs	r3, #0
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e70:	4b79      	ldr	r3, [pc, #484]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	f200 80e1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x34>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8a:	e0db      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b73      	ldr	r3, [pc, #460]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e90:	e0db      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e96:	e0d8      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004edc:	0150      	lsls	r0, r2, #5
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	1a51      	subs	r1, r2, r1
 8004ee6:	6139      	str	r1, [r7, #16]
 8004ee8:	4629      	mov	r1, r5
 8004eea:	eb63 0301 	sbc.w	r3, r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	018b      	lsls	r3, r1, #6
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f06:	4651      	mov	r1, sl
 8004f08:	018a      	lsls	r2, r1, #6
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f10:	4659      	mov	r1, fp
 8004f12:	eb63 0901 	sbc.w	r9, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb18 0303 	adds.w	r3, r8, r3
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	462b      	mov	r3, r5
 8004f38:	eb49 0303 	adc.w	r3, r9, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	024b      	lsls	r3, r1, #9
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f54:	4621      	mov	r1, r4
 8004f56:	024a      	lsls	r2, r1, #9
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f68:	f7fb f92e 	bl	80001c8 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	e058      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	4611      	mov	r1, r2
 8004f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa2:	0150      	lsls	r0, r2, #5
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4641      	mov	r1, r8
 8004faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	464b      	mov	r3, r9
 8004fec:	eb45 0303 	adc.w	r3, r5, r3
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005012:	2200      	movs	r2, #0
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	61fa      	str	r2, [r7, #28]
 8005018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501c:	f7fb f8d4 	bl	80001c8 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800504c:	4618      	mov	r0, r3
 800504e:	3750      	adds	r7, #80	; 0x50
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	007a1200 	.word	0x007a1200

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800a768 	.word	0x0800a768

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800a768 	.word	0x0800a768

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07b      	b.n	80051d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d108      	bne.n	80050f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e005      	b.n	8005104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc f850 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	ea42 0103 	orr.w	r1, r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0104 	and.w	r1, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0210 	and.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b08c      	sub	sp, #48	; 0x30
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051ec:	2301      	movs	r3, #1
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x26>
 8005200:	2302      	movs	r3, #2
 8005202:	e198      	b.n	8005536 <HAL_SPI_TransmitReceive+0x358>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520c:	f7fc f99c 	bl	8001548 <HAL_GetTick>
 8005210:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800522a:	2b01      	cmp	r3, #1
 800522c:	d00f      	beq.n	800524e <HAL_SPI_TransmitReceive+0x70>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005234:	d107      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x68>
 800523e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005242:	2b04      	cmp	r3, #4
 8005244:	d003      	beq.n	800524e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800524c:	e16d      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x82>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x82>
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d103      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005266:	e160      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b04      	cmp	r3, #4
 8005272:	d003      	beq.n	800527c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2205      	movs	r2, #5
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	887a      	ldrh	r2, [r7, #2]
 8005292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	887a      	ldrh	r2, [r7, #2]
 800529e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d007      	beq.n	80052d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d8:	d17c      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x10a>
 80052e2:	8b7b      	ldrh	r3, [r7, #26]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d16a      	bne.n	80053be <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	1c9a      	adds	r2, r3, #2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530c:	e057      	b.n	80053be <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11b      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x176>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x176>
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d113      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d119      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x1b8>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d014      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	b292      	uxth	r2, r2
 8005378:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005396:	f7fc f8d7 	bl	8001548 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d80b      	bhi.n	80053be <HAL_SPI_TransmitReceive+0x1e0>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d007      	beq.n	80053be <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80053bc:	e0b5      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1a2      	bne.n	800530e <HAL_SPI_TransmitReceive+0x130>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d19d      	bne.n	800530e <HAL_SPI_TransmitReceive+0x130>
 80053d2:	e080      	b.n	80054d6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x204>
 80053dc:	8b7b      	ldrh	r3, [r7, #26]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d16f      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005408:	e05b      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d11c      	bne.n	8005452 <HAL_SPI_TransmitReceive+0x274>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d017      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x274>
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d114      	bne.n	8005452 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d119      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x2b6>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005490:	2301      	movs	r3, #1
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005494:	f7fc f858 	bl	8001548 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d803      	bhi.n	80054ac <HAL_SPI_TransmitReceive+0x2ce>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_TransmitReceive+0x2d4>
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054c0:	e033      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d19e      	bne.n	800540a <HAL_SPI_TransmitReceive+0x22c>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d199      	bne.n	800540a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8b8 	bl	8005650 <SPI_EndRxTxTransaction>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d006      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054f2:	e01a      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005520:	e003      	b.n	800552a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005536:	4618      	mov	r0, r3
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005550:	f7fb fffa 	bl	8001548 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005560:	f7fb fff2 	bl	8001548 <HAL_GetTick>
 8005564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005566:	4b39      	ldr	r3, [pc, #228]	; (800564c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	015b      	lsls	r3, r3, #5
 800556c:	0d1b      	lsrs	r3, r3, #20
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005576:	e054      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d050      	beq.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005580:	f7fb ffe2 	bl	8001548 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	429a      	cmp	r2, r3
 800558e:	d902      	bls.n	8005596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d13d      	bne.n	8005612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ae:	d111      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	d004      	beq.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c2:	d107      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d10f      	bne.n	80055fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e017      	b.n	8005642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3b01      	subs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	429a      	cmp	r2, r3
 800563e:	d19b      	bne.n	8005578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000

08005650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2201      	movs	r2, #1
 8005664:	2102      	movs	r1, #2
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff6a 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e032      	b.n	80056e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <SPI_EndRxTxTransaction+0xa0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <SPI_EndRxTxTransaction+0xa4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	0d5b      	lsrs	r3, r3, #21
 800568e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d112      	bne.n	80056c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff ff47 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e00f      	b.n	80056e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d0f2      	beq.n	80056c8 <SPI_EndRxTxTransaction+0x78>
 80056e2:	e000      	b.n	80056e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80056e4:	bf00      	nop
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000000 	.word	0x20000000
 80056f4:	165e9f81 	.word	0x165e9f81

080056f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e041      	b.n	800578e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fd98 	bl	8001254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 f9b8 	bl	8005aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x24>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e022      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d109      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x3e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e015      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d109      	bne.n	80057f0 <HAL_TIM_PWM_Start+0x58>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e008      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e07c      	b.n	8005904 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start+0x82>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005818:	e013      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start+0x92>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	e00b      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005838:	e003      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fb8a 	bl	8005f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <HAL_TIM_PWM_Start+0x174>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_PWM_Start+0xcc>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <HAL_TIM_PWM_Start+0x178>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_TIM_PWM_Start+0xd0>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_TIM_PWM_Start+0xd2>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a22      	ldr	r2, [pc, #136]	; (800590c <HAL_TIM_PWM_Start+0x174>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d01d      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_TIM_PWM_Start+0x17c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <HAL_TIM_PWM_Start+0x180>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_TIM_PWM_Start+0x184>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_TIM_PWM_Start+0x178>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_TIM_PWM_Start+0x188>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIM_PWM_Start+0x136>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a16      	ldr	r2, [pc, #88]	; (8005924 <HAL_TIM_PWM_Start+0x18c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b06      	cmp	r3, #6
 80058de:	d010      	beq.n	8005902 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f0:	e007      	b.n	8005902 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40014000 	.word	0x40014000
 8005924:	40001800 	.word	0x40001800

08005928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005942:	2302      	movs	r3, #2
 8005944:	e0ae      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b0c      	cmp	r3, #12
 8005952:	f200 809f 	bhi.w	8005a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005991 	.word	0x08005991
 8005960:	08005a95 	.word	0x08005a95
 8005964:	08005a95 	.word	0x08005a95
 8005968:	08005a95 	.word	0x08005a95
 800596c:	080059d1 	.word	0x080059d1
 8005970:	08005a95 	.word	0x08005a95
 8005974:	08005a95 	.word	0x08005a95
 8005978:	08005a95 	.word	0x08005a95
 800597c:	08005a13 	.word	0x08005a13
 8005980:	08005a95 	.word	0x08005a95
 8005984:	08005a95 	.word	0x08005a95
 8005988:	08005a95 	.word	0x08005a95
 800598c:	08005a53 	.word	0x08005a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f934 	bl	8005c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0208 	orr.w	r2, r2, #8
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0204 	bic.w	r2, r2, #4
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
      break;
 80059ce:	e064      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f984 	bl	8005ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6999      	ldr	r1, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	021a      	lsls	r2, r3, #8
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	619a      	str	r2, [r3, #24]
      break;
 8005a10:	e043      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f9d9 	bl	8005dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0208 	orr.w	r2, r2, #8
 8005a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0204 	bic.w	r2, r2, #4
 8005a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	61da      	str	r2, [r3, #28]
      break;
 8005a50:	e023      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa2d 	bl	8005eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69d9      	ldr	r1, [r3, #28]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	021a      	lsls	r2, r3, #8
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	61da      	str	r2, [r3, #28]
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	75fb      	strb	r3, [r7, #23]
      break;
 8005a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a46      	ldr	r2, [pc, #280]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <TIM_Base_SetConfig+0x130>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a42      	ldr	r2, [pc, #264]	; (8005be0 <TIM_Base_SetConfig+0x134>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a41      	ldr	r2, [pc, #260]	; (8005be4 <TIM_Base_SetConfig+0x138>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a40      	ldr	r2, [pc, #256]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a35      	ldr	r2, [pc, #212]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d02b      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d027      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <TIM_Base_SetConfig+0x130>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d023      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a31      	ldr	r2, [pc, #196]	; (8005be0 <TIM_Base_SetConfig+0x134>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01f      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <TIM_Base_SetConfig+0x138>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01b      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2f      	ldr	r2, [pc, #188]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d017      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <TIM_Base_SetConfig+0x140>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00f      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_Base_SetConfig+0x150>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_Base_SetConfig+0x154>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d108      	bne.n	8005b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_Base_SetConfig+0xf8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d103      	bne.n	8005bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	611a      	str	r2, [r3, #16]
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40010400 	.word	0x40010400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	40001800 	.word	0x40001800
 8005bfc:	40001c00 	.word	0x40001c00
 8005c00:	40002000 	.word	0x40002000

08005c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f023 0201 	bic.w	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0302 	bic.w	r3, r3, #2
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a20      	ldr	r2, [pc, #128]	; (8005cdc <TIM_OC1_SetConfig+0xd8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC1_SetConfig+0x64>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <TIM_OC1_SetConfig+0xdc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10c      	bne.n	8005c82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0308 	bic.w	r3, r3, #8
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 0304 	bic.w	r3, r3, #4
 8005c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <TIM_OC1_SetConfig+0xd8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC1_SetConfig+0x8e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <TIM_OC1_SetConfig+0xdc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d111      	bne.n	8005cb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f023 0210 	bic.w	r2, r3, #16
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0320 	bic.w	r3, r3, #32
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <TIM_OC2_SetConfig+0xe4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC2_SetConfig+0x68>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <TIM_OC2_SetConfig+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <TIM_OC2_SetConfig+0xe4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <TIM_OC2_SetConfig+0x94>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <TIM_OC2_SetConfig+0xe8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d113      	bne.n	8005da0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <TIM_OC3_SetConfig+0xe0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC3_SetConfig+0x66>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <TIM_OC3_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10d      	bne.n	8005e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <TIM_OC3_SetConfig+0xe0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC3_SetConfig+0x92>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <TIM_OC3_SetConfig+0xe4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d113      	bne.n	8005e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <TIM_OC4_SetConfig+0xa4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_OC4_SetConfig+0x68>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a11      	ldr	r2, [pc, #68]	; (8005f60 <TIM_OC4_SetConfig+0xa8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400

08005f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e05a      	b.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a21      	ldr	r2, [pc, #132]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d01d      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1a      	ldr	r2, [pc, #104]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a18      	ldr	r2, [pc, #96]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d10c      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40010400 	.word	0x40010400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40001800 	.word	0x40001800

080060a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e03d      	b.n	8006140 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e042      	b.n	80061e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb f8ca 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800618e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f973 	bl	800647c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b20      	cmp	r3, #32
 800620a:	d175      	bne.n	80062f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_UART_Transmit+0x2c>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e06e      	b.n	80062fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2221      	movs	r2, #33	; 0x21
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800622a:	f7fb f98d 	bl	8001548 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d108      	bne.n	8006258 <HAL_UART_Transmit+0x6c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e003      	b.n	8006260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006260:	e02e      	b.n	80062c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2200      	movs	r2, #0
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f848 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e03a      	b.n	80062fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3302      	adds	r3, #2
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	e007      	b.n	80062b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	781a      	ldrb	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1cb      	bne.n	8006262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2140      	movs	r1, #64	; 0x40
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f814 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	603b      	str	r3, [r7, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006312:	e03b      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d037      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631c:	f7fb f914 	bl	8001548 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	429a      	cmp	r2, r3
 800632a:	d302      	bcc.n	8006332 <UART_WaitOnFlagUntilTimeout+0x30>
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e03a      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d023      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d020      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d01d      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b08      	cmp	r3, #8
 800635c:	d116      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f81d 	bl	80063b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2208      	movs	r2, #8
 800637e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e00f      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4013      	ands	r3, r2
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d0b4      	beq.n	8006314 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b095      	sub	sp, #84	; 0x54
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063dc:	643a      	str	r2, [r7, #64]	; 0x40
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	d119      	bne.n	8006460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60bb      	str	r3, [r7, #8]
   return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	647b      	str	r3, [r7, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800644c:	61ba      	str	r2, [r7, #24]
 800644e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800646e:	bf00      	nop
 8006470:	3754      	adds	r7, #84	; 0x54
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006480:	b0c0      	sub	sp, #256	; 0x100
 8006482:	af00      	add	r7, sp, #0
 8006484:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	ea40 0301 	orr.w	r3, r0, r1
 80064a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064d4:	f021 010c 	bic.w	r1, r1, #12
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064e2:	430b      	orrs	r3, r1
 80064e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	6999      	ldr	r1, [r3, #24]
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	ea40 0301 	orr.w	r3, r0, r1
 8006502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b8f      	ldr	r3, [pc, #572]	; (8006748 <UART_SetConfig+0x2cc>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0xa0>
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b8d      	ldr	r3, [pc, #564]	; (800674c <UART_SetConfig+0x2d0>)
 8006518:	429a      	cmp	r2, r3
 800651a:	d104      	bne.n	8006526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fe fdc2 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 8006520:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006524:	e003      	b.n	800652e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006526:	f7fe fda9 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 800652a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006538:	f040 810c 	bne.w	8006754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006546:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800654a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800654e:	4622      	mov	r2, r4
 8006550:	462b      	mov	r3, r5
 8006552:	1891      	adds	r1, r2, r2
 8006554:	65b9      	str	r1, [r7, #88]	; 0x58
 8006556:	415b      	adcs	r3, r3
 8006558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800655e:	4621      	mov	r1, r4
 8006560:	eb12 0801 	adds.w	r8, r2, r1
 8006564:	4629      	mov	r1, r5
 8006566:	eb43 0901 	adc.w	r9, r3, r1
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800657a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800657e:	4690      	mov	r8, r2
 8006580:	4699      	mov	r9, r3
 8006582:	4623      	mov	r3, r4
 8006584:	eb18 0303 	adds.w	r3, r8, r3
 8006588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800658c:	462b      	mov	r3, r5
 800658e:	eb49 0303 	adc.w	r3, r9, r3
 8006592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065aa:	460b      	mov	r3, r1
 80065ac:	18db      	adds	r3, r3, r3
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
 80065b0:	4613      	mov	r3, r2
 80065b2:	eb42 0303 	adc.w	r3, r2, r3
 80065b6:	657b      	str	r3, [r7, #84]	; 0x54
 80065b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065c0:	f7f9 fe02 	bl	80001c8 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4b61      	ldr	r3, [pc, #388]	; (8006750 <UART_SetConfig+0x2d4>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	011c      	lsls	r4, r3, #4
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	1891      	adds	r1, r2, r2
 80065ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80065ec:	415b      	adcs	r3, r3
 80065ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065f4:	4641      	mov	r1, r8
 80065f6:	eb12 0a01 	adds.w	sl, r2, r1
 80065fa:	4649      	mov	r1, r9
 80065fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800660c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006614:	4692      	mov	sl, r2
 8006616:	469b      	mov	fp, r3
 8006618:	4643      	mov	r3, r8
 800661a:	eb1a 0303 	adds.w	r3, sl, r3
 800661e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006622:	464b      	mov	r3, r9
 8006624:	eb4b 0303 	adc.w	r3, fp, r3
 8006628:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006638:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800663c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006640:	460b      	mov	r3, r1
 8006642:	18db      	adds	r3, r3, r3
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
 8006646:	4613      	mov	r3, r2
 8006648:	eb42 0303 	adc.w	r3, r2, r3
 800664c:	647b      	str	r3, [r7, #68]	; 0x44
 800664e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006656:	f7f9 fdb7 	bl	80001c8 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4611      	mov	r1, r2
 8006660:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <UART_SetConfig+0x2d4>)
 8006662:	fba3 2301 	umull	r2, r3, r3, r1
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	2264      	movs	r2, #100	; 0x64
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	1acb      	subs	r3, r1, r3
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006676:	4b36      	ldr	r3, [pc, #216]	; (8006750 <UART_SetConfig+0x2d4>)
 8006678:	fba3 2302 	umull	r2, r3, r3, r2
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006684:	441c      	add	r4, r3
 8006686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006690:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006698:	4642      	mov	r2, r8
 800669a:	464b      	mov	r3, r9
 800669c:	1891      	adds	r1, r2, r2
 800669e:	63b9      	str	r1, [r7, #56]	; 0x38
 80066a0:	415b      	adcs	r3, r3
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066a8:	4641      	mov	r1, r8
 80066aa:	1851      	adds	r1, r2, r1
 80066ac:	6339      	str	r1, [r7, #48]	; 0x30
 80066ae:	4649      	mov	r1, r9
 80066b0:	414b      	adcs	r3, r1
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066c0:	4659      	mov	r1, fp
 80066c2:	00cb      	lsls	r3, r1, #3
 80066c4:	4651      	mov	r1, sl
 80066c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ca:	4651      	mov	r1, sl
 80066cc:	00ca      	lsls	r2, r1, #3
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	4642      	mov	r2, r8
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066dc:	464b      	mov	r3, r9
 80066de:	460a      	mov	r2, r1
 80066e0:	eb42 0303 	adc.w	r3, r2, r3
 80066e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066fc:	460b      	mov	r3, r1
 80066fe:	18db      	adds	r3, r3, r3
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
 8006702:	4613      	mov	r3, r2
 8006704:	eb42 0303 	adc.w	r3, r2, r3
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800670e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006712:	f7f9 fd59 	bl	80001c8 <__aeabi_uldivmod>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <UART_SetConfig+0x2d4>)
 800671c:	fba3 1302 	umull	r1, r3, r3, r2
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	2164      	movs	r1, #100	; 0x64
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	3332      	adds	r3, #50	; 0x32
 800672e:	4a08      	ldr	r2, [pc, #32]	; (8006750 <UART_SetConfig+0x2d4>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f003 0207 	and.w	r2, r3, #7
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4422      	add	r2, r4
 8006742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006744:	e106      	b.n	8006954 <UART_SetConfig+0x4d8>
 8006746:	bf00      	nop
 8006748:	40011000 	.word	0x40011000
 800674c:	40011400 	.word	0x40011400
 8006750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800675e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006766:	4642      	mov	r2, r8
 8006768:	464b      	mov	r3, r9
 800676a:	1891      	adds	r1, r2, r2
 800676c:	6239      	str	r1, [r7, #32]
 800676e:	415b      	adcs	r3, r3
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006776:	4641      	mov	r1, r8
 8006778:	1854      	adds	r4, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb43 0501 	adc.w	r5, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	00eb      	lsls	r3, r5, #3
 800678a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800678e:	00e2      	lsls	r2, r4, #3
 8006790:	4614      	mov	r4, r2
 8006792:	461d      	mov	r5, r3
 8006794:	4643      	mov	r3, r8
 8006796:	18e3      	adds	r3, r4, r3
 8006798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800679c:	464b      	mov	r3, r9
 800679e:	eb45 0303 	adc.w	r3, r5, r3
 80067a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067c2:	4629      	mov	r1, r5
 80067c4:	008b      	lsls	r3, r1, #2
 80067c6:	4621      	mov	r1, r4
 80067c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067cc:	4621      	mov	r1, r4
 80067ce:	008a      	lsls	r2, r1, #2
 80067d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067d4:	f7f9 fcf8 	bl	80001c8 <__aeabi_uldivmod>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4b60      	ldr	r3, [pc, #384]	; (8006960 <UART_SetConfig+0x4e4>)
 80067de:	fba3 2302 	umull	r2, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	011c      	lsls	r4, r3, #4
 80067e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	1891      	adds	r1, r2, r2
 80067fe:	61b9      	str	r1, [r7, #24]
 8006800:	415b      	adcs	r3, r3
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006808:	4641      	mov	r1, r8
 800680a:	1851      	adds	r1, r2, r1
 800680c:	6139      	str	r1, [r7, #16]
 800680e:	4649      	mov	r1, r9
 8006810:	414b      	adcs	r3, r1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006820:	4659      	mov	r1, fp
 8006822:	00cb      	lsls	r3, r1, #3
 8006824:	4651      	mov	r1, sl
 8006826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682a:	4651      	mov	r1, sl
 800682c:	00ca      	lsls	r2, r1, #3
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	4603      	mov	r3, r0
 8006834:	4642      	mov	r2, r8
 8006836:	189b      	adds	r3, r3, r2
 8006838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800683c:	464b      	mov	r3, r9
 800683e:	460a      	mov	r2, r1
 8006840:	eb42 0303 	adc.w	r3, r2, r3
 8006844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	67bb      	str	r3, [r7, #120]	; 0x78
 8006852:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006860:	4649      	mov	r1, r9
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	4641      	mov	r1, r8
 8006866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686a:	4641      	mov	r1, r8
 800686c:	008a      	lsls	r2, r1, #2
 800686e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006872:	f7f9 fca9 	bl	80001c8 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4611      	mov	r1, r2
 800687c:	4b38      	ldr	r3, [pc, #224]	; (8006960 <UART_SetConfig+0x4e4>)
 800687e:	fba3 2301 	umull	r2, r3, r3, r1
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2264      	movs	r2, #100	; 0x64
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	1acb      	subs	r3, r1, r3
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	3332      	adds	r3, #50	; 0x32
 8006890:	4a33      	ldr	r2, [pc, #204]	; (8006960 <UART_SetConfig+0x4e4>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800689c:	441c      	add	r4, r3
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	673b      	str	r3, [r7, #112]	; 0x70
 80068a6:	677a      	str	r2, [r7, #116]	; 0x74
 80068a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	1891      	adds	r1, r2, r2
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	415b      	adcs	r3, r3
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068bc:	4641      	mov	r1, r8
 80068be:	1851      	adds	r1, r2, r1
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	4649      	mov	r1, r9
 80068c4:	414b      	adcs	r3, r1
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068d4:	4659      	mov	r1, fp
 80068d6:	00cb      	lsls	r3, r1, #3
 80068d8:	4651      	mov	r1, sl
 80068da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068de:	4651      	mov	r1, sl
 80068e0:	00ca      	lsls	r2, r1, #3
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	4642      	mov	r2, r8
 80068ea:	189b      	adds	r3, r3, r2
 80068ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ee:	464b      	mov	r3, r9
 80068f0:	460a      	mov	r2, r1
 80068f2:	eb42 0303 	adc.w	r3, r2, r3
 80068f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	663b      	str	r3, [r7, #96]	; 0x60
 8006902:	667a      	str	r2, [r7, #100]	; 0x64
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006910:	4649      	mov	r1, r9
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	4641      	mov	r1, r8
 8006916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800691a:	4641      	mov	r1, r8
 800691c:	008a      	lsls	r2, r1, #2
 800691e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006922:	f7f9 fc51 	bl	80001c8 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <UART_SetConfig+0x4e4>)
 800692c:	fba3 1302 	umull	r1, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	2164      	movs	r1, #100	; 0x64
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	3332      	adds	r3, #50	; 0x32
 800693e:	4a08      	ldr	r2, [pc, #32]	; (8006960 <UART_SetConfig+0x4e4>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f003 020f 	and.w	r2, r3, #15
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4422      	add	r2, r4
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800695a:	46bd      	mov	sp, r7
 800695c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006960:	51eb851f 	.word	0x51eb851f

08006964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006964:	b084      	sub	sp, #16
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	f107 001c 	add.w	r0, r7, #28
 8006972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006976:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800697a:	2b01      	cmp	r3, #1
 800697c:	d123      	bne.n	80069c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fae2 	bl	8007f84 <USB_CoreReset>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e01b      	b.n	80069fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fad6 	bl	8007f84 <USB_CoreReset>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
 80069f0:	e005      	b.n	80069fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069fe:	7fbb      	ldrb	r3, [r7, #30]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d10b      	bne.n	8006a1c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f043 0206 	orr.w	r2, r3, #6
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a28:	b004      	add	sp, #16
 8006a2a:	4770      	bx	lr

08006a2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d165      	bne.n	8006b0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4a41      	ldr	r2, [pc, #260]	; (8006b48 <USB_SetTurnaroundTime+0x11c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d906      	bls.n	8006a56 <USB_SetTurnaroundTime+0x2a>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a40      	ldr	r2, [pc, #256]	; (8006b4c <USB_SetTurnaroundTime+0x120>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d202      	bcs.n	8006a56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a50:	230f      	movs	r3, #15
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e062      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <USB_SetTurnaroundTime+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d306      	bcc.n	8006a6c <USB_SetTurnaroundTime+0x40>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4a3b      	ldr	r2, [pc, #236]	; (8006b50 <USB_SetTurnaroundTime+0x124>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d202      	bcs.n	8006a6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a66:	230e      	movs	r3, #14
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e057      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4a38      	ldr	r2, [pc, #224]	; (8006b50 <USB_SetTurnaroundTime+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d306      	bcc.n	8006a82 <USB_SetTurnaroundTime+0x56>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a37      	ldr	r2, [pc, #220]	; (8006b54 <USB_SetTurnaroundTime+0x128>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d202      	bcs.n	8006a82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a7c:	230d      	movs	r3, #13
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e04c      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4a33      	ldr	r2, [pc, #204]	; (8006b54 <USB_SetTurnaroundTime+0x128>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d306      	bcc.n	8006a98 <USB_SetTurnaroundTime+0x6c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <USB_SetTurnaroundTime+0x12c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d802      	bhi.n	8006a98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a92:	230c      	movs	r3, #12
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e041      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a2f      	ldr	r2, [pc, #188]	; (8006b58 <USB_SetTurnaroundTime+0x12c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d906      	bls.n	8006aae <USB_SetTurnaroundTime+0x82>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <USB_SetTurnaroundTime+0x130>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d802      	bhi.n	8006aae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006aa8:	230b      	movs	r3, #11
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e036      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a2a      	ldr	r2, [pc, #168]	; (8006b5c <USB_SetTurnaroundTime+0x130>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d906      	bls.n	8006ac4 <USB_SetTurnaroundTime+0x98>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4a29      	ldr	r2, [pc, #164]	; (8006b60 <USB_SetTurnaroundTime+0x134>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d802      	bhi.n	8006ac4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006abe:	230a      	movs	r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e02b      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <USB_SetTurnaroundTime+0x134>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d906      	bls.n	8006ada <USB_SetTurnaroundTime+0xae>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <USB_SetTurnaroundTime+0x138>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d202      	bcs.n	8006ada <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ad4:	2309      	movs	r3, #9
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e020      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <USB_SetTurnaroundTime+0x138>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d306      	bcc.n	8006af0 <USB_SetTurnaroundTime+0xc4>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <USB_SetTurnaroundTime+0x13c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d802      	bhi.n	8006af0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006aea:	2308      	movs	r3, #8
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e015      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <USB_SetTurnaroundTime+0x13c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d906      	bls.n	8006b06 <USB_SetTurnaroundTime+0xda>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <USB_SetTurnaroundTime+0x140>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d202      	bcs.n	8006b06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b00:	2307      	movs	r3, #7
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e00a      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b06:	2306      	movs	r3, #6
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e007      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b12:	2309      	movs	r3, #9
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e001      	b.n	8006b1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b18:	2309      	movs	r3, #9
 8006b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	00d8acbf 	.word	0x00d8acbf
 8006b4c:	00e4e1c0 	.word	0x00e4e1c0
 8006b50:	00f42400 	.word	0x00f42400
 8006b54:	01067380 	.word	0x01067380
 8006b58:	011a499f 	.word	0x011a499f
 8006b5c:	01312cff 	.word	0x01312cff
 8006b60:	014ca43f 	.word	0x014ca43f
 8006b64:	016e3600 	.word	0x016e3600
 8006b68:	01a6ab1f 	.word	0x01a6ab1f
 8006b6c:	01e84800 	.word	0x01e84800

08006b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f043 0201 	orr.w	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 0201 	bic.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d115      	bne.n	8006c02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006be2:	200a      	movs	r0, #10
 8006be4:	f7fa fcbc 	bl	8001560 <HAL_Delay>
      ms += 10U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	330a      	adds	r3, #10
 8006bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f939 	bl	8007e66 <USB_GetMode>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d01e      	beq.n	8006c38 <USB_SetCurrentMode+0x84>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2bc7      	cmp	r3, #199	; 0xc7
 8006bfe:	d9f0      	bls.n	8006be2 <USB_SetCurrentMode+0x2e>
 8006c00:	e01a      	b.n	8006c38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d115      	bne.n	8006c34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c14:	200a      	movs	r0, #10
 8006c16:	f7fa fca3 	bl	8001560 <HAL_Delay>
      ms += 10U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	330a      	adds	r3, #10
 8006c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f920 	bl	8007e66 <USB_GetMode>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <USB_SetCurrentMode+0x84>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2bc7      	cmp	r3, #199	; 0xc7
 8006c30:	d9f0      	bls.n	8006c14 <USB_SetCurrentMode+0x60>
 8006c32:	e001      	b.n	8006c38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e005      	b.n	8006c44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2bc8      	cmp	r3, #200	; 0xc8
 8006c3c:	d101      	bne.n	8006c42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e009      	b.n	8006c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3340      	adds	r3, #64	; 0x40
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b0e      	cmp	r3, #14
 8006c84:	d9f2      	bls.n	8006c6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d11c      	bne.n	8006cc8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9c:	f043 0302 	orr.w	r3, r3, #2
 8006ca0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8006cc6:	e00b      	b.n	8006ce0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2300      	movs	r3, #0
 8006cea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d10d      	bne.n	8006d10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f968 	bl	8006fd4 <USB_SetDevSpeed>
 8006d04:	e008      	b.n	8006d18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d06:	2101      	movs	r1, #1
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f963 	bl	8006fd4 <USB_SetDevSpeed>
 8006d0e:	e003      	b.n	8006d18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d10:	2103      	movs	r1, #3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f95e 	bl	8006fd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d18:	2110      	movs	r1, #16
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8fa 	bl	8006f14 <USB_FlushTxFifo>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f924 	bl	8006f78 <USB_FlushRxFifo>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e043      	b.n	8006dec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7a:	d118      	bne.n	8006dae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e013      	b.n	8006dc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	461a      	mov	r2, r3
 8006da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e008      	b.n	8006dc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dde:	461a      	mov	r2, r3
 8006de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006df0:	461a      	mov	r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d3b5      	bcc.n	8006d64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	e043      	b.n	8006e86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e14:	d118      	bne.n	8006e48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e013      	b.n	8006e5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e008      	b.n	8006e5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	3301      	adds	r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d3b5      	bcc.n	8006dfe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006eb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f043 0210 	orr.w	r2, r3, #16
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <USB_DevInit+0x2c4>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ed4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f043 0208 	orr.w	r2, r3, #8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	f043 0304 	orr.w	r3, r3, #4
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f0c:	b004      	add	sp, #16
 8006f0e:	4770      	bx	lr
 8006f10:	803c3800 	.word	0x803c3800

08006f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f2e:	d901      	bls.n	8006f34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e01b      	b.n	8006f6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	daf2      	bge.n	8006f22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	019b      	lsls	r3, r3, #6
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f58:	d901      	bls.n	8006f5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e006      	b.n	8006f6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d0f0      	beq.n	8006f4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f90:	d901      	bls.n	8006f96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e018      	b.n	8006fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	daf2      	bge.n	8006f84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fb4:	d901      	bls.n	8006fba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e006      	b.n	8006fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d0f0      	beq.n	8006fa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0306 	and.w	r3, r3, #6
 800701e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
 800702a:	e00a      	b.n	8007042 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d002      	beq.n	8007038 <USB_GetDevSpeed+0x32>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d102      	bne.n	800703e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007038:	2302      	movs	r3, #2
 800703a:	75fb      	strb	r3, [r7, #23]
 800703c:	e001      	b.n	8007042 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800703e:	230f      	movs	r3, #15
 8007040:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
}
 8007044:	4618      	mov	r0, r3
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d13a      	bne.n	80070e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	b29b      	uxth	r3, r3
 8007084:	68f9      	ldr	r1, [r7, #12]
 8007086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800708a:	4313      	orrs	r3, r2
 800708c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d155      	bne.n	8007150 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	059b      	lsls	r3, r3, #22
 80070c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070c8:	4313      	orrs	r3, r2
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e036      	b.n	8007150 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	2101      	movs	r1, #1
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007100:	4313      	orrs	r3, r2
 8007102:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11a      	bne.n	8007150 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007136:	430b      	orrs	r3, r1
 8007138:	4313      	orrs	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d161      	bne.n	8007240 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800718e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007192:	d11f      	bne.n	80071d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	2101      	movs	r1, #1
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	43db      	mvns	r3, r3
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f4:	4013      	ands	r3, r2
 80071f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 030f 	and.w	r3, r3, #15
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f303 	lsl.w	r3, r1, r3
 800720e:	b29b      	uxth	r3, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4013      	ands	r3, r2
 800721a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	0159      	lsls	r1, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	440b      	add	r3, r1
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	4619      	mov	r1, r3
 8007238:	4b35      	ldr	r3, [pc, #212]	; (8007310 <USB_DeactivateEndpoint+0x1b0>)
 800723a:	4013      	ands	r3, r2
 800723c:	600b      	str	r3, [r1, #0]
 800723e:	e060      	b.n	8007302 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007256:	d11f      	bne.n	8007298 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007276:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	2101      	movs	r1, #1
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	041b      	lsls	r3, r3, #16
 80072b0:	43db      	mvns	r3, r3
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b8:	4013      	ands	r3, r2
 80072ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f303 	lsl.w	r3, r1, r3
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	43db      	mvns	r3, r3
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072dc:	4013      	ands	r3, r2
 80072de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	0159      	lsls	r1, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	4619      	mov	r1, r3
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <USB_DeactivateEndpoint+0x1b4>)
 80072fe:	4013      	ands	r3, r2
 8007300:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	ec337800 	.word	0xec337800
 8007314:	eff37800 	.word	0xeff37800

08007318 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af02      	add	r7, sp, #8
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 817a 	bne.w	800762e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d132      	bne.n	80073a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	440a      	add	r2, r1
 8007358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007360:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007384:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a0:	0cdb      	lsrs	r3, r3, #19
 80073a2:	04db      	lsls	r3, r3, #19
 80073a4:	6113      	str	r3, [r2, #16]
 80073a6:	e092      	b.n	80074ce <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c2:	0cdb      	lsrs	r3, r3, #19
 80073c4:	04db      	lsls	r3, r3, #19
 80073c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11a      	bne.n	8007428 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d903      	bls.n	8007406 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007424:	6113      	str	r3, [r2, #16]
 8007426:	e01b      	b.n	8007460 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6919      	ldr	r1, [r3, #16]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	440b      	add	r3, r1
 8007440:	1e59      	subs	r1, r3, #1
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	fbb1 f3f3 	udiv	r3, r1, r3
 800744a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800744c:	4ba2      	ldr	r3, [pc, #648]	; (80076d8 <USB_EPStartXfer+0x3c0>)
 800744e:	400b      	ands	r3, r1
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	0148      	lsls	r0, r1, #5
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	4401      	add	r1, r0
 8007458:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800745c:	4313      	orrs	r3, r2
 800745e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007476:	69b9      	ldr	r1, [r7, #24]
 8007478:	0148      	lsls	r0, r1, #5
 800747a:	69f9      	ldr	r1, [r7, #28]
 800747c:	4401      	add	r1, r0
 800747e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	791b      	ldrb	r3, [r3, #4]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11f      	bne.n	80074ce <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d14b      	bne.n	800756c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791b      	ldrb	r3, [r3, #4]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d128      	bne.n	800754a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e00f      	b.n	800754a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007548:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	440a      	add	r2, r1
 8007560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007564:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e165      	b.n	8007838 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800758a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d015      	beq.n	80075c0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 814d 	beq.w	8007838 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	2101      	movs	r1, #1
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	69f9      	ldr	r1, [r7, #28]
 80075b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ba:	4313      	orrs	r3, r2
 80075bc:	634b      	str	r3, [r1, #52]	; 0x34
 80075be:	e13b      	b.n	8007838 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d110      	bne.n	80075f2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e00f      	b.n	8007612 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007610:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	68d9      	ldr	r1, [r3, #12]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	b298      	uxth	r0, r3
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4603      	mov	r3, r0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f9b8 	bl	800799c <USB_WritePacket>
 800762c:	e104      	b.n	8007838 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007648:	0cdb      	lsrs	r3, r3, #19
 800764a:	04db      	lsls	r3, r3, #19
 800764c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800766c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007670:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d131      	bne.n	80076dc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	0148      	lsls	r0, r1, #5
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	4401      	add	r1, r0
 80076ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076b2:	4313      	orrs	r3, r2
 80076b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076d4:	6113      	str	r3, [r2, #16]
 80076d6:	e061      	b.n	800779c <USB_EPStartXfer+0x484>
 80076d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d123      	bne.n	800772c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fa:	69b9      	ldr	r1, [r7, #24]
 80076fc:	0148      	lsls	r0, r1, #5
 80076fe:	69f9      	ldr	r1, [r7, #28]
 8007700:	4401      	add	r1, r0
 8007702:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007706:	4313      	orrs	r3, r2
 8007708:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	440a      	add	r2, r1
 8007720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007728:	6113      	str	r3, [r2, #16]
 800772a:	e037      	b.n	800779c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4413      	add	r3, r2
 8007736:	1e5a      	subs	r2, r3, #1
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	8afa      	ldrh	r2, [r7, #22]
 8007748:	fb03 f202 	mul.w	r2, r3, r2
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	8afb      	ldrh	r3, [r7, #22]
 8007760:	04d9      	lsls	r1, r3, #19
 8007762:	4b38      	ldr	r3, [pc, #224]	; (8007844 <USB_EPStartXfer+0x52c>)
 8007764:	400b      	ands	r3, r1
 8007766:	69b9      	ldr	r1, [r7, #24]
 8007768:	0148      	lsls	r0, r1, #5
 800776a:	69f9      	ldr	r1, [r7, #28]
 800776c:	4401      	add	r1, r0
 800776e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007772:	4313      	orrs	r3, r2
 8007774:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	0148      	lsls	r0, r1, #5
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	4401      	add	r1, r0
 8007794:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007798:	4313      	orrs	r3, r2
 800779a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d10d      	bne.n	80077be <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	68d9      	ldr	r1, [r3, #12]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ba:	460a      	mov	r2, r1
 80077bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d128      	bne.n	8007818 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d110      	bne.n	80077f8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	e00f      	b.n	8007818 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	440a      	add	r2, r1
 800780e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007816:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3720      	adds	r7, #32
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	1ff80000 	.word	0x1ff80000

08007848 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d14a      	bne.n	80078fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800787a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800787e:	f040 8086 	bne.w	800798e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	7812      	ldrb	r2, [r2, #0]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d902      	bls.n	80078e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
          break;
 80078de:	e056      	b.n	800798e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f8:	d0e7      	beq.n	80078ca <USB_EPStopXfer+0x82>
 80078fa:	e048      	b.n	800798e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007914:	d13b      	bne.n	800798e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	7812      	ldrb	r2, [r2, #0]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007934:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007938:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800795c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f242 7210 	movw	r2, #10000	; 0x2710
 800796a:	4293      	cmp	r3, r2
 800796c:	d902      	bls.n	8007974 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
          break;
 8007972:	e00c      	b.n	800798e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800798c:	d0e7      	beq.n	800795e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800798e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007990:	4618      	mov	r0, r3
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800799c:	b480      	push	{r7}
 800799e:	b089      	sub	sp, #36	; 0x24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4611      	mov	r1, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	460b      	mov	r3, r1
 80079ac:	71fb      	strb	r3, [r7, #7]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d123      	bne.n	8007a0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079c2:	88bb      	ldrh	r3, [r7, #4]
 80079c4:	3303      	adds	r3, #3
 80079c6:	089b      	lsrs	r3, r3, #2
 80079c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	e018      	b.n	8007a02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	031a      	lsls	r2, r3, #12
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079dc:	461a      	mov	r2, r3
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3301      	adds	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	3301      	adds	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	3301      	adds	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3301      	adds	r3, #1
 80079fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3301      	adds	r3, #1
 8007a00:	61bb      	str	r3, [r7, #24]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d3e2      	bcc.n	80079d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3724      	adds	r7, #36	; 0x24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b08b      	sub	sp, #44	; 0x2c
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	623b      	str	r3, [r7, #32]
 8007a42:	e014      	b.n	8007a6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	3301      	adds	r3, #1
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	3301      	adds	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	3301      	adds	r3, #1
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	3301      	adds	r3, #1
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	6a3a      	ldr	r2, [r7, #32]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d3e6      	bcc.n	8007a44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a76:	8bfb      	ldrh	r3, [r7, #30]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01e      	beq.n	8007aba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a86:	461a      	mov	r2, r3
 8007a88:	f107 0310 	add.w	r3, r7, #16
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	701a      	strb	r2, [r3, #0]
      i++;
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	3301      	adds	r3, #1
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007aae:	8bfb      	ldrh	r3, [r7, #30]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ab4:	8bfb      	ldrh	r3, [r7, #30]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ea      	bne.n	8007a90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	372c      	adds	r7, #44	; 0x2c
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d12c      	bne.n	8007b3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	db12      	blt.n	8007b1c <USB_EPSetStall+0x54>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00f      	beq.n	8007b1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e02b      	b.n	8007b96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db12      	blt.n	8007b76 <USB_EPSetStall+0xae>
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00f      	beq.n	8007b76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d128      	bne.n	8007c12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	791b      	ldrb	r3, [r3, #4]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d003      	beq.n	8007bf0 <USB_EPClearStall+0x4c>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	791b      	ldrb	r3, [r3, #4]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d138      	bne.n	8007c62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	e027      	b.n	8007c62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d003      	beq.n	8007c42 <USB_EPClearStall+0x9e>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	791b      	ldrb	r3, [r3, #4]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d10f      	bne.n	8007c62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ca4:	68f9      	ldr	r1, [r7, #12]
 8007ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007caa:	4313      	orrs	r3, r2
 8007cac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cea:	f023 0302 	bic.w	r3, r3, #2
 8007cee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d18:	f023 0303 	bic.w	r3, r3, #3
 8007d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d2c:	f043 0302 	orr.w	r3, r3, #2
 8007d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4013      	ands	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4013      	ands	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	0c1b      	lsrs	r3, r3, #16
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	b29b      	uxth	r3, r3
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	01db      	lsls	r3, r3, #7
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4013      	ands	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e58:	68bb      	ldr	r3, [r7, #8]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f003 0301 	and.w	r3, r3, #1
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	333c      	adds	r3, #60	; 0x3c
 8007ede:	3304      	adds	r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4a26      	ldr	r2, [pc, #152]	; (8007f80 <USB_EP0_OutStart+0xb8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d90a      	bls.n	8007f02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007efc:	d101      	bne.n	8007f02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e037      	b.n	8007f72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f30:	f043 0318 	orr.w	r3, r3, #24
 8007f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	4f54300a 	.word	0x4f54300a

08007f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f9c:	d901      	bls.n	8007fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e01b      	b.n	8007fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	daf2      	bge.n	8007f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f043 0201 	orr.w	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fc6:	d901      	bls.n	8007fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e006      	b.n	8007fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d0f0      	beq.n	8007fba <USB_CoreReset+0x36>

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007ff4:	2054      	movs	r0, #84	; 0x54
 8007ff6:	f002 faf5 	bl	800a5e4 <USBD_static_malloc>
 8007ffa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32b0      	adds	r2, #176	; 0xb0
 800800c:	2100      	movs	r1, #0
 800800e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008012:	2302      	movs	r3, #2
 8008014:	e08b      	b.n	800812e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	32b0      	adds	r2, #176	; 0xb0
 8008020:	68f9      	ldr	r1, [r7, #12]
 8008022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	32b0      	adds	r2, #176	; 0xb0
 8008030:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7c1b      	ldrb	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11b      	bne.n	800807a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008042:	4b3d      	ldr	r3, [pc, #244]	; (8008138 <USBD_CUSTOM_HID_Init+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f003 020f 	and.w	r2, r3, #15
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	3326      	adds	r3, #38	; 0x26
 8008058:	2205      	movs	r2, #5
 800805a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800805c:	4b37      	ldr	r3, [pc, #220]	; (800813c <USBD_CUSTOM_HID_Init+0x154>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008074:	2205      	movs	r2, #5
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	e01a      	b.n	80080b0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800807a:	4b2f      	ldr	r3, [pc, #188]	; (8008138 <USBD_CUSTOM_HID_Init+0x150>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	3326      	adds	r3, #38	; 0x26
 8008090:	2205      	movs	r2, #5
 8008092:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <USBD_CUSTOM_HID_Init+0x154>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80080ac:	2205      	movs	r2, #5
 80080ae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80080b0:	4b21      	ldr	r3, [pc, #132]	; (8008138 <USBD_CUSTOM_HID_Init+0x150>)
 80080b2:	7819      	ldrb	r1, [r3, #0]
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	2203      	movs	r2, #3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f982 	bl	800a3c2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80080be:	4b1e      	ldr	r3, [pc, #120]	; (8008138 <USBD_CUSTOM_HID_Init+0x150>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 020f 	and.w	r2, r3, #15
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	440b      	add	r3, r1
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	2201      	movs	r2, #1
 80080d6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80080d8:	4b18      	ldr	r3, [pc, #96]	; (800813c <USBD_CUSTOM_HID_Init+0x154>)
 80080da:	7819      	ldrb	r1, [r3, #0]
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	2203      	movs	r2, #3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f002 f96e 	bl	800a3c2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80080e6:	4b15      	ldr	r3, [pc, #84]	; (800813c <USBD_CUSTOM_HID_Init+0x154>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 020f 	and.w	r2, r3, #15
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080fe:	2201      	movs	r2, #1
 8008100:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	33b0      	adds	r3, #176	; 0xb0
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <USBD_CUSTOM_HID_Init+0x154>)
 8008120:	7819      	ldrb	r1, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	2340      	movs	r3, #64	; 0x40
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f002 fa3a 	bl	800a5a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000086 	.word	0x20000086
 800813c:	20000087 	.word	0x20000087

08008140 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800814c:	4b37      	ldr	r3, [pc, #220]	; (800822c <USBD_CUSTOM_HID_DeInit+0xec>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f002 f95b 	bl	800a40e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008158:	4b34      	ldr	r3, [pc, #208]	; (800822c <USBD_CUSTOM_HID_DeInit+0xec>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	3324      	adds	r3, #36	; 0x24
 800816e:	2200      	movs	r2, #0
 8008170:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <USBD_CUSTOM_HID_DeInit+0xec>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3326      	adds	r3, #38	; 0x26
 8008188:	2200      	movs	r2, #0
 800818a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f002 f93b 	bl	800a40e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 020f 	and.w	r2, r3, #15
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081b0:	2200      	movs	r2, #0
 80081b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80081b4:	4b1e      	ldr	r3, [pc, #120]	; (8008230 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 020f 	and.w	r2, r3, #15
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80081cc:	2200      	movs	r2, #0
 80081ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	32b0      	adds	r2, #176	; 0xb0
 80081da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01f      	beq.n	8008222 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	33b0      	adds	r3, #176	; 0xb0
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	32b0      	adds	r2, #176	; 0xb0
 8008200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008204:	4618      	mov	r0, r3
 8008206:	f002 f9fb 	bl	800a600 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32b0      	adds	r2, #176	; 0xb0
 8008214:	2100      	movs	r1, #0
 8008216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000086 	.word	0x20000086
 8008230:	20000087 	.word	0x20000087

08008234 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	32b0      	adds	r2, #176	; 0xb0
 8008248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	e0f8      	b.n	800845a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008270:	2b00      	cmp	r3, #0
 8008272:	d056      	beq.n	8008322 <USBD_CUSTOM_HID_Setup+0xee>
 8008274:	2b20      	cmp	r3, #32
 8008276:	f040 80e8 	bne.w	800844a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	3b02      	subs	r3, #2
 8008280:	2b09      	cmp	r3, #9
 8008282:	d846      	bhi.n	8008312 <USBD_CUSTOM_HID_Setup+0xde>
 8008284:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBD_CUSTOM_HID_Setup+0x58>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082c3 	.word	0x080082c3
 8008294:	08008313 	.word	0x08008313
 8008298:	08008313 	.word	0x08008313
 800829c:	08008313 	.word	0x08008313
 80082a0:	08008313 	.word	0x08008313
 80082a4:	08008313 	.word	0x08008313
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082d3 	.word	0x080082d3
 80082b0:	080082b5 	.word	0x080082b5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	885b      	ldrh	r3, [r3, #2]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80082c0:	e02e      	b.n	8008320 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3340      	adds	r3, #64	; 0x40
 80082c6:	2201      	movs	r2, #1
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fcce 	bl	8009c6c <USBD_CtlSendData>
          break;
 80082d0:	e026      	b.n	8008320 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80082e2:	e01d      	b.n	8008320 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	3344      	adds	r3, #68	; 0x44
 80082e8:	2201      	movs	r2, #1
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fcbd 	bl	8009c6c <USBD_CtlSendData>
          break;
 80082f2:	e015      	b.n	8008320 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2201      	movs	r2, #1
 80082f8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80082fa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	bf28      	it	cs
 8008304:	2340      	movcs	r3, #64	; 0x40
 8008306:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008308:	461a      	mov	r2, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fcda 	bl	8009cc4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008310:	e006      	b.n	8008320 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fc38 	bl	8009b8a <USBD_CtlError>
          ret = USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	75fb      	strb	r3, [r7, #23]
          break;
 800831e:	bf00      	nop
      }
      break;
 8008320:	e09a      	b.n	8008458 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b0b      	cmp	r3, #11
 8008328:	f200 8086 	bhi.w	8008438 <USBD_CUSTOM_HID_Setup+0x204>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USBD_CUSTOM_HID_Setup+0x100>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008365 	.word	0x08008365
 8008338:	08008447 	.word	0x08008447
 800833c:	08008439 	.word	0x08008439
 8008340:	08008439 	.word	0x08008439
 8008344:	08008439 	.word	0x08008439
 8008348:	08008439 	.word	0x08008439
 800834c:	0800838f 	.word	0x0800838f
 8008350:	08008439 	.word	0x08008439
 8008354:	08008439 	.word	0x08008439
 8008358:	08008439 	.word	0x08008439
 800835c:	080083e7 	.word	0x080083e7
 8008360:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b03      	cmp	r3, #3
 800836e:	d107      	bne.n	8008380 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008370:	f107 030e 	add.w	r3, r7, #14
 8008374:	2202      	movs	r2, #2
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fc77 	bl	8009c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800837e:	e063      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 fc01 	bl	8009b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	75fb      	strb	r3, [r7, #23]
          break;
 800838c:	e05c      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	0a1b      	lsrs	r3, r3, #8
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b22      	cmp	r3, #34	; 0x22
 8008398:	d110      	bne.n	80083bc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b21      	cmp	r3, #33	; 0x21
 80083a0:	bf28      	it	cs
 80083a2:	2321      	movcs	r3, #33	; 0x21
 80083a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	33b0      	adds	r3, #176	; 0xb0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e00d      	b.n	80083d8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	0a1b      	lsrs	r3, r3, #8
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b21      	cmp	r3, #33	; 0x21
 80083c6:	d107      	bne.n	80083d8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80083c8:	4b26      	ldr	r3, [pc, #152]	; (8008464 <USBD_CUSTOM_HID_Setup+0x230>)
 80083ca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	bf28      	it	cs
 80083d4:	2309      	movcs	r3, #9
 80083d6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80083d8:	8bfb      	ldrh	r3, [r7, #30]
 80083da:	461a      	mov	r2, r3
 80083dc:	69b9      	ldr	r1, [r7, #24]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fc44 	bl	8009c6c <USBD_CtlSendData>
          break;
 80083e4:	e030      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d107      	bne.n	8008402 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3348      	adds	r3, #72	; 0x48
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fc36 	bl	8009c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008400:	e022      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fbc0 	bl	8009b8a <USBD_CtlError>
            ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
          break;
 800840e:	e01b      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d106      	bne.n	800842a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	885b      	ldrh	r3, [r3, #2]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008428:	e00e      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fbac 	bl	8009b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
          break;
 8008436:	e007      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fba5 	bl	8009b8a <USBD_CtlError>
          ret = USBD_FAIL;
 8008440:	2303      	movs	r3, #3
 8008442:	75fb      	strb	r3, [r7, #23]
          break;
 8008444:	e000      	b.n	8008448 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008446:	bf00      	nop
      }
      break;
 8008448:	e006      	b.n	8008458 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fb9c 	bl	8009b8a <USBD_CtlError>
      ret = USBD_FAIL;
 8008452:	2303      	movs	r3, #3
 8008454:	75fb      	strb	r3, [r7, #23]
      break;
 8008456:	bf00      	nop
  }
  return (uint8_t)ret;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000070 	.word	0x20000070

08008468 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	32b0      	adds	r2, #176	; 0xb0
 8008480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008484:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	e019      	b.n	80084c4 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b03      	cmp	r3, #3
 800849a:	d112      	bne.n	80084c2 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <USBD_CUSTOM_HID_SendReport+0x64>)
 80084b0:	7819      	ldrb	r1, [r3, #0]
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f002 f851 	bl	800a55e <USBD_LL_Transmit>
 80084bc:	e001      	b.n	80084c2 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000086 	.word	0x20000086

080084d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80084d8:	2181      	movs	r1, #129	; 0x81
 80084da:	4815      	ldr	r0, [pc, #84]	; (8008530 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80084dc:	f000 fd1d 	bl	8008f1a <USBD_GetEpDesc>
 80084e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80084e2:	2101      	movs	r1, #1
 80084e4:	4812      	ldr	r0, [pc, #72]	; (8008530 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80084e6:	f000 fd18 	bl	8008f1a <USBD_GetEpDesc>
 80084ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084fa:	711a      	strb	r2, [r3, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2205      	movs	r2, #5
 8008504:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008514:	711a      	strb	r2, [r3, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2205      	movs	r2, #5
 800851e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2229      	movs	r2, #41	; 0x29
 8008524:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008526:	4b02      	ldr	r3, [pc, #8]	; (8008530 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20000044 	.word	0x20000044

08008534 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800853c:	2181      	movs	r1, #129	; 0x81
 800853e:	4815      	ldr	r0, [pc, #84]	; (8008594 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008540:	f000 fceb 	bl	8008f1a <USBD_GetEpDesc>
 8008544:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008546:	2101      	movs	r1, #1
 8008548:	4812      	ldr	r0, [pc, #72]	; (8008594 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800854a:	f000 fce6 	bl	8008f1a <USBD_GetEpDesc>
 800854e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855e:	711a      	strb	r2, [r3, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2205      	movs	r2, #5
 8008568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008578:	711a      	strb	r2, [r3, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2205      	movs	r2, #5
 8008582:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2229      	movs	r2, #41	; 0x29
 8008588:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800858a:	4b02      	ldr	r3, [pc, #8]	; (8008594 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000044 	.word	0x20000044

08008598 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80085a0:	2181      	movs	r1, #129	; 0x81
 80085a2:	4815      	ldr	r0, [pc, #84]	; (80085f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80085a4:	f000 fcb9 	bl	8008f1a <USBD_GetEpDesc>
 80085a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80085aa:	2101      	movs	r1, #1
 80085ac:	4812      	ldr	r0, [pc, #72]	; (80085f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80085ae:	f000 fcb4 	bl	8008f1a <USBD_GetEpDesc>
 80085b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085c2:	711a      	strb	r2, [r3, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2205      	movs	r2, #5
 80085cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085dc:	711a      	strb	r2, [r3, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2205      	movs	r2, #5
 80085e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2229      	movs	r2, #41	; 0x29
 80085ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20000044 	.word	0x20000044

080085fc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32b0      	adds	r2, #176	; 0xb0
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	32b0      	adds	r2, #176	; 0xb0
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	e017      	b.n	800867c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	; 0xb0
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	; 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	7810      	ldrb	r0, [r2, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	7852      	ldrb	r2, [r2, #1]
 8008676:	4611      	mov	r1, r2
 8008678:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	32b0      	adds	r2, #176	; 0xb0
 8008696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	e00f      	b.n	80086c2 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	32b0      	adds	r2, #176	; 0xb0
 80086ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80086b2:	4b06      	ldr	r3, [pc, #24]	; (80086cc <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80086b4:	7819      	ldrb	r1, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 ff70 	bl	800a5a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000087 	.word	0x20000087

080086d0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32b0      	adds	r2, #176	; 0xb0
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e016      	b.n	8008720 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d111      	bne.n	800871e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	33b0      	adds	r3, #176	; 0xb0
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	7810      	ldrb	r0, [r2, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	7852      	ldrb	r2, [r2, #1]
 8008714:	4611      	mov	r1, r2
 8008716:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	220a      	movs	r2, #10
 8008734:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	2000007c 	.word	0x2000007c

08008748 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	e009      	b.n	8008770 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	33b0      	adds	r3, #176	; 0xb0
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	e01f      	b.n	80087d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	79fa      	ldrb	r2, [r7, #7]
 80087c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f001 fd93 	bl	800a2f4 <USBD_LL_Init>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e025      	b.n	8008840 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32ae      	adds	r2, #174	; 0xae
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00f      	beq.n	8008830 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32ae      	adds	r2, #174	; 0xae
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	f107 020e 	add.w	r2, r7, #14
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	4602      	mov	r2, r0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fd9b 	bl	800a38c <USBD_LL_Start>
 8008856:	4603      	mov	r3, r0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	78fa      	ldrb	r2, [r7, #3]
 800889a:	4611      	mov	r1, r2
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088d4:	2303      	movs	r3, #3
 80088d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 f90e 	bl	8009b16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008916:	f003 031f 	and.w	r3, r3, #31
 800891a:	2b02      	cmp	r3, #2
 800891c:	d01a      	beq.n	8008954 <USBD_LL_SetupStage+0x72>
 800891e:	2b02      	cmp	r3, #2
 8008920:	d822      	bhi.n	8008968 <USBD_LL_SetupStage+0x86>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <USBD_LL_SetupStage+0x4a>
 8008926:	2b01      	cmp	r3, #1
 8008928:	d00a      	beq.n	8008940 <USBD_LL_SetupStage+0x5e>
 800892a:	e01d      	b.n	8008968 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fb65 	bl	8009004 <USBD_StdDevReq>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
      break;
 800893e:	e020      	b.n	8008982 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fbcd 	bl	80090e8 <USBD_StdItfReq>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	e016      	b.n	8008982 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fc2f 	bl	80091c0 <USBD_StdEPReq>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
      break;
 8008966:	e00c      	b.n	8008982 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800896e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fd68 	bl	800a44c <USBD_LL_StallEP>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]
      break;
 8008980:	bf00      	nop
  }

  return ret;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	460b      	mov	r3, r1
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d16e      	bne.n	8008a82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	f040 8098 	bne.w	8008ae8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d913      	bls.n	80089ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	1ad2      	subs	r2, r2, r3
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	4293      	cmp	r3, r2
 80089dc:	bf28      	it	cs
 80089de:	4613      	movcs	r3, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f001 f98a 	bl	8009cfe <USBD_CtlContinueRx>
 80089ea:	e07d      	b.n	8008ae8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d014      	beq.n	8008a24 <USBD_LL_DataOutStage+0x98>
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d81d      	bhi.n	8008a3a <USBD_LL_DataOutStage+0xae>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <USBD_LL_DataOutStage+0x7c>
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d003      	beq.n	8008a0e <USBD_LL_DataOutStage+0x82>
 8008a06:	e018      	b.n	8008a3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75bb      	strb	r3, [r7, #22]
            break;
 8008a0c:	e018      	b.n	8008a40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fa64 	bl	8008ee6 <USBD_CoreFindIF>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75bb      	strb	r3, [r7, #22]
            break;
 8008a22:	e00d      	b.n	8008a40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fa66 	bl	8008f00 <USBD_CoreFindEP>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75bb      	strb	r3, [r7, #22]
            break;
 8008a38:	e002      	b.n	8008a40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a40:	7dbb      	ldrb	r3, [r7, #22]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d119      	bne.n	8008a7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d113      	bne.n	8008a7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a52:	7dba      	ldrb	r2, [r7, #22]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	32ae      	adds	r2, #174	; 0xae
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a62:	7dba      	ldrb	r2, [r7, #22]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a6a:	7dba      	ldrb	r2, [r7, #22]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	32ae      	adds	r2, #174	; 0xae
 8008a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f001 f950 	bl	8009d20 <USBD_CtlSendStatus>
 8008a80:	e032      	b.n	8008ae8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fa37 	bl	8008f00 <USBD_CoreFindEP>
 8008a92:	4603      	mov	r3, r0
 8008a94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a96:	7dbb      	ldrb	r3, [r7, #22]
 8008a98:	2bff      	cmp	r3, #255	; 0xff
 8008a9a:	d025      	beq.n	8008ae8 <USBD_LL_DataOutStage+0x15c>
 8008a9c:	7dbb      	ldrb	r3, [r7, #22]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d122      	bne.n	8008ae8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d117      	bne.n	8008ade <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008aae:	7dba      	ldrb	r2, [r7, #22]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	32ae      	adds	r2, #174	; 0xae
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00f      	beq.n	8008ade <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008abe:	7dba      	ldrb	r2, [r7, #22]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ac6:	7dba      	ldrb	r2, [r7, #22]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	32ae      	adds	r2, #174	; 0xae
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	7afa      	ldrb	r2, [r7, #11]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	4798      	blx	r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	e000      	b.n	8008aea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	460b      	mov	r3, r1
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d16f      	bne.n	8008be6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3314      	adds	r3, #20
 8008b0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d15a      	bne.n	8008bcc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d914      	bls.n	8008b4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f001 f8b2 	bl	8009ca2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 fd2b 	bl	800a5a0 <USBD_LL_PrepareReceive>
 8008b4a:	e03f      	b.n	8008bcc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d11c      	bne.n	8008b92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d316      	bcc.n	8008b92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d20f      	bcs.n	8008b92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b72:	2200      	movs	r2, #0
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 f893 	bl	8009ca2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b84:	2300      	movs	r3, #0
 8008b86:	2200      	movs	r2, #0
 8008b88:	2100      	movs	r1, #0
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f001 fd08 	bl	800a5a0 <USBD_LL_PrepareReceive>
 8008b90:	e01c      	b.n	8008bcc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d10f      	bne.n	8008bbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bbe:	2180      	movs	r1, #128	; 0x80
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f001 fc43 	bl	800a44c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f001 f8bd 	bl	8009d46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d03a      	beq.n	8008c4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fe42 	bl	8008860 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008be4:	e032      	b.n	8008c4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008be6:	7afb      	ldrb	r3, [r7, #11]
 8008be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f985 	bl	8008f00 <USBD_CoreFindEP>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	2bff      	cmp	r3, #255	; 0xff
 8008bfe:	d025      	beq.n	8008c4c <USBD_LL_DataInStage+0x15a>
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d122      	bne.n	8008c4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d11c      	bne.n	8008c4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c12:	7dfa      	ldrb	r2, [r7, #23]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	32ae      	adds	r2, #174	; 0xae
 8008c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d014      	beq.n	8008c4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c22:	7dfa      	ldrb	r2, [r7, #23]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c2a:	7dfa      	ldrb	r2, [r7, #23]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	32ae      	adds	r2, #174	; 0xae
 8008c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	7afa      	ldrb	r2, [r7, #11]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c42:	7dbb      	ldrb	r3, [r7, #22]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c48:	7dbb      	ldrb	r3, [r7, #22]
 8008c4a:	e000      	b.n	8008c4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d014      	beq.n	8008cbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6852      	ldr	r2, [r2, #4]
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	4611      	mov	r1, r2
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4798      	blx	r3
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fb7d 	bl	800a3c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2240      	movs	r2, #64	; 0x40
 8008cd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2180      	movs	r1, #128	; 0x80
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fb6f 	bl	800a3c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2240      	movs	r2, #64	; 0x40
 8008cee:	621a      	str	r2, [r3, #32]

  return ret;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d006      	beq.n	8008d3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2204      	movs	r2, #4
 8008d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d106      	bne.n	8008d74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d110      	bne.n	8008db8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	32ae      	adds	r2, #174	; 0xae
 8008dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e01c      	b.n	8008e1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d115      	bne.n	8008e1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	32ae      	adds	r2, #174	; 0xae
 8008dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	32ae      	adds	r2, #174	; 0xae
 8008e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	4611      	mov	r1, r2
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32ae      	adds	r2, #174	; 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01c      	b.n	8008e82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d115      	bne.n	8008e80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32ae      	adds	r2, #174	; 0xae
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32ae      	adds	r2, #174	; 0xae
 8008e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00e      	beq.n	8008edc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6852      	ldr	r2, [r2, #4]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	4611      	mov	r1, r2
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4798      	blx	r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ef2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d920      	bls.n	8008f84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f4a:	e013      	b.n	8008f74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f4c:	f107 030a 	add.w	r3, r7, #10
 8008f50:	4619      	mov	r1, r3
 8008f52:	6978      	ldr	r0, [r7, #20]
 8008f54:	f000 f81b 	bl	8008f8e <USBD_GetNextDesc>
 8008f58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d108      	bne.n	8008f74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	789b      	ldrb	r3, [r3, #2]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d008      	beq.n	8008f82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	885b      	ldrh	r3, [r3, #2]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	897b      	ldrh	r3, [r7, #10]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d8e5      	bhi.n	8008f4c <USBD_GetEpDesc+0x32>
 8008f80:	e000      	b.n	8008f84 <USBD_GetEpDesc+0x6a>
          break;
 8008f82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f84:	693b      	ldr	r3, [r7, #16]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	881a      	ldrh	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fba:	68fb      	ldr	r3, [r7, #12]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fe6:	8a3b      	ldrh	r3, [r7, #16]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	b21a      	sxth	r2, r3
 8008fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	b21b      	sxth	r3, r3
 8008ff4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d005      	beq.n	800902a <USBD_StdDevReq+0x26>
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	d857      	bhi.n	80090d2 <USBD_StdDevReq+0xce>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00f      	beq.n	8009046 <USBD_StdDevReq+0x42>
 8009026:	2b20      	cmp	r3, #32
 8009028:	d153      	bne.n	80090d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	32ae      	adds	r2, #174	; 0xae
 8009034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]
      break;
 8009044:	e04a      	b.n	80090dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b09      	cmp	r3, #9
 800904c:	d83b      	bhi.n	80090c6 <USBD_StdDevReq+0xc2>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <USBD_StdDevReq+0x50>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	080090a9 	.word	0x080090a9
 8009058:	080090bd 	.word	0x080090bd
 800905c:	080090c7 	.word	0x080090c7
 8009060:	080090b3 	.word	0x080090b3
 8009064:	080090c7 	.word	0x080090c7
 8009068:	08009087 	.word	0x08009087
 800906c:	0800907d 	.word	0x0800907d
 8009070:	080090c7 	.word	0x080090c7
 8009074:	0800909f 	.word	0x0800909f
 8009078:	08009091 	.word	0x08009091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa3c 	bl	80094fc <USBD_GetDescriptor>
          break;
 8009084:	e024      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fba1 	bl	80097d0 <USBD_SetAddress>
          break;
 800908e:	e01f      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fbe0 	bl	8009858 <USBD_SetConfig>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
          break;
 800909c:	e018      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fc83 	bl	80099ac <USBD_GetConfig>
          break;
 80090a6:	e013      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fcb4 	bl	8009a18 <USBD_GetStatus>
          break;
 80090b0:	e00e      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fce3 	bl	8009a80 <USBD_SetFeature>
          break;
 80090ba:	e009      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd07 	bl	8009ad2 <USBD_ClrFeature>
          break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fd5e 	bl	8009b8a <USBD_CtlError>
          break;
 80090ce:	bf00      	nop
      }
      break;
 80090d0:	e004      	b.n	80090dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fd58 	bl	8009b8a <USBD_CtlError>
      break;
 80090da:	bf00      	nop
  }

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop

080090e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d005      	beq.n	800910e <USBD_StdItfReq+0x26>
 8009102:	2b40      	cmp	r3, #64	; 0x40
 8009104:	d852      	bhi.n	80091ac <USBD_StdItfReq+0xc4>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <USBD_StdItfReq+0x26>
 800910a:	2b20      	cmp	r3, #32
 800910c:	d14e      	bne.n	80091ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	2b02      	cmp	r3, #2
 800911a:	d840      	bhi.n	800919e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	889b      	ldrh	r3, [r3, #4]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b01      	cmp	r3, #1
 8009124:	d836      	bhi.n	8009194 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	889b      	ldrh	r3, [r3, #4]
 800912a:	b2db      	uxtb	r3, r3
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fed9 	bl	8008ee6 <USBD_CoreFindIF>
 8009134:	4603      	mov	r3, r0
 8009136:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2bff      	cmp	r3, #255	; 0xff
 800913c:	d01d      	beq.n	800917a <USBD_StdItfReq+0x92>
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d11a      	bne.n	800917a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009144:	7bba      	ldrb	r2, [r7, #14]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32ae      	adds	r2, #174	; 0xae
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00f      	beq.n	8009174 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009154:	7bba      	ldrb	r2, [r7, #14]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800915c:	7bba      	ldrb	r2, [r7, #14]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	32ae      	adds	r2, #174	; 0xae
 8009162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009172:	e004      	b.n	800917e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009178:	e001      	b.n	800917e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800917a:	2303      	movs	r3, #3
 800917c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	88db      	ldrh	r3, [r3, #6]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d110      	bne.n	80091a8 <USBD_StdItfReq+0xc0>
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10d      	bne.n	80091a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fdc7 	bl	8009d20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009192:	e009      	b.n	80091a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fcf7 	bl	8009b8a <USBD_CtlError>
          break;
 800919c:	e004      	b.n	80091a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fcf2 	bl	8009b8a <USBD_CtlError>
          break;
 80091a6:	e000      	b.n	80091aa <USBD_StdItfReq+0xc2>
          break;
 80091a8:	bf00      	nop
      }
      break;
 80091aa:	e004      	b.n	80091b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fceb 	bl	8009b8a <USBD_CtlError>
      break;
 80091b4:	bf00      	nop
  }

  return ret;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	889b      	ldrh	r3, [r3, #4]
 80091d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	d007      	beq.n	80091f0 <USBD_StdEPReq+0x30>
 80091e0:	2b40      	cmp	r3, #64	; 0x40
 80091e2:	f200 817f 	bhi.w	80094e4 <USBD_StdEPReq+0x324>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d02a      	beq.n	8009240 <USBD_StdEPReq+0x80>
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	f040 817a 	bne.w	80094e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff fe83 	bl	8008f00 <USBD_CoreFindEP>
 80091fa:	4603      	mov	r3, r0
 80091fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091fe:	7b7b      	ldrb	r3, [r7, #13]
 8009200:	2bff      	cmp	r3, #255	; 0xff
 8009202:	f000 8174 	beq.w	80094ee <USBD_StdEPReq+0x32e>
 8009206:	7b7b      	ldrb	r3, [r7, #13]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 8170 	bne.w	80094ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800920e:	7b7a      	ldrb	r2, [r7, #13]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009216:	7b7a      	ldrb	r2, [r7, #13]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	32ae      	adds	r2, #174	; 0xae
 800921c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8163 	beq.w	80094ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009228:	7b7a      	ldrb	r2, [r7, #13]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32ae      	adds	r2, #174	; 0xae
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800923e:	e156      	b.n	80094ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b03      	cmp	r3, #3
 8009246:	d008      	beq.n	800925a <USBD_StdEPReq+0x9a>
 8009248:	2b03      	cmp	r3, #3
 800924a:	f300 8145 	bgt.w	80094d8 <USBD_StdEPReq+0x318>
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 809b 	beq.w	800938a <USBD_StdEPReq+0x1ca>
 8009254:	2b01      	cmp	r3, #1
 8009256:	d03c      	beq.n	80092d2 <USBD_StdEPReq+0x112>
 8009258:	e13e      	b.n	80094d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d002      	beq.n	800926c <USBD_StdEPReq+0xac>
 8009266:	2b03      	cmp	r3, #3
 8009268:	d016      	beq.n	8009298 <USBD_StdEPReq+0xd8>
 800926a:	e02c      	b.n	80092c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00d      	beq.n	800928e <USBD_StdEPReq+0xce>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d00a      	beq.n	800928e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 f8e5 	bl	800a44c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f8e1 	bl	800a44c <USBD_LL_StallEP>
 800928a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800928c:	e020      	b.n	80092d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fc7a 	bl	8009b8a <USBD_CtlError>
              break;
 8009296:	e01b      	b.n	80092d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	885b      	ldrh	r3, [r3, #2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10e      	bne.n	80092be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <USBD_StdEPReq+0xfe>
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d008      	beq.n	80092be <USBD_StdEPReq+0xfe>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	88db      	ldrh	r3, [r3, #6]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 f8c7 	bl	800a44c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fd2e 	bl	8009d20 <USBD_CtlSendStatus>

              break;
 80092c4:	e004      	b.n	80092d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fc5e 	bl	8009b8a <USBD_CtlError>
              break;
 80092ce:	bf00      	nop
          }
          break;
 80092d0:	e107      	b.n	80094e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d002      	beq.n	80092e4 <USBD_StdEPReq+0x124>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d016      	beq.n	8009310 <USBD_StdEPReq+0x150>
 80092e2:	e04b      	b.n	800937c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00d      	beq.n	8009306 <USBD_StdEPReq+0x146>
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d00a      	beq.n	8009306 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 f8a9 	bl	800a44c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 f8a5 	bl	800a44c <USBD_LL_StallEP>
 8009302:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009304:	e040      	b.n	8009388 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fc3e 	bl	8009b8a <USBD_CtlError>
              break;
 800930e:	e03b      	b.n	8009388 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	885b      	ldrh	r3, [r3, #2]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d136      	bne.n	8009386 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 f8af 	bl	800a48a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fcf7 	bl	8009d20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff fde2 	bl	8008f00 <USBD_CoreFindEP>
 800933c:	4603      	mov	r3, r0
 800933e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009340:	7b7b      	ldrb	r3, [r7, #13]
 8009342:	2bff      	cmp	r3, #255	; 0xff
 8009344:	d01f      	beq.n	8009386 <USBD_StdEPReq+0x1c6>
 8009346:	7b7b      	ldrb	r3, [r7, #13]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11c      	bne.n	8009386 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800934c:	7b7a      	ldrb	r2, [r7, #13]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009354:	7b7a      	ldrb	r2, [r7, #13]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	32ae      	adds	r2, #174	; 0xae
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009364:	7b7a      	ldrb	r2, [r7, #13]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	32ae      	adds	r2, #174	; 0xae
 800936a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800937a:	e004      	b.n	8009386 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc03 	bl	8009b8a <USBD_CtlError>
              break;
 8009384:	e000      	b.n	8009388 <USBD_StdEPReq+0x1c8>
              break;
 8009386:	bf00      	nop
          }
          break;
 8009388:	e0ab      	b.n	80094e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d002      	beq.n	800939c <USBD_StdEPReq+0x1dc>
 8009396:	2b03      	cmp	r3, #3
 8009398:	d032      	beq.n	8009400 <USBD_StdEPReq+0x240>
 800939a:	e097      	b.n	80094cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <USBD_StdEPReq+0x1f2>
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b80      	cmp	r3, #128	; 0x80
 80093a6:	d004      	beq.n	80093b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fbed 	bl	8009b8a <USBD_CtlError>
                break;
 80093b0:	e091      	b.n	80094d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da0b      	bge.n	80093d2 <USBD_StdEPReq+0x212>
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	3310      	adds	r3, #16
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	4413      	add	r3, r2
 80093ce:	3304      	adds	r3, #4
 80093d0:	e00b      	b.n	80093ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2202      	movs	r2, #2
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fc37 	bl	8009c6c <USBD_CtlSendData>
              break;
 80093fe:	e06a      	b.n	80094d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	da11      	bge.n	800942c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	f003 020f 	and.w	r2, r3, #15
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	3324      	adds	r3, #36	; 0x24
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d117      	bne.n	8009452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fbb0 	bl	8009b8a <USBD_CtlError>
                  break;
 800942a:	e054      	b.n	80094d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fb9d 	bl	8009b8a <USBD_CtlError>
                  break;
 8009450:	e041      	b.n	80094d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009456:	2b00      	cmp	r3, #0
 8009458:	da0b      	bge.n	8009472 <USBD_StdEPReq+0x2b2>
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	3310      	adds	r3, #16
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	3304      	adds	r3, #4
 8009470:	e00b      	b.n	800948a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	3304      	adds	r3, #4
 800948a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <USBD_StdEPReq+0x2d8>
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b80      	cmp	r3, #128	; 0x80
 8009496:	d103      	bne.n	80094a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e00e      	b.n	80094be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 f80f 	bl	800a4c8 <USBD_LL_IsStallEP>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e002      	b.n	80094be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2202      	movs	r2, #2
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fbd1 	bl	8009c6c <USBD_CtlSendData>
              break;
 80094ca:	e004      	b.n	80094d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fb5b 	bl	8009b8a <USBD_CtlError>
              break;
 80094d4:	bf00      	nop
          }
          break;
 80094d6:	e004      	b.n	80094e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fb55 	bl	8009b8a <USBD_CtlError>
          break;
 80094e0:	bf00      	nop
      }
      break;
 80094e2:	e005      	b.n	80094f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fb4f 	bl	8009b8a <USBD_CtlError>
      break;
 80094ec:	e000      	b.n	80094f0 <USBD_StdEPReq+0x330>
      break;
 80094ee:	bf00      	nop
  }

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	2b06      	cmp	r3, #6
 800951e:	f200 8128 	bhi.w	8009772 <USBD_GetDescriptor+0x276>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <USBD_GetDescriptor+0x2c>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	08009545 	.word	0x08009545
 800952c:	0800955d 	.word	0x0800955d
 8009530:	0800959d 	.word	0x0800959d
 8009534:	08009773 	.word	0x08009773
 8009538:	08009773 	.word	0x08009773
 800953c:	08009713 	.word	0x08009713
 8009540:	0800973f 	.word	0x0800973f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7c12      	ldrb	r2, [r2, #16]
 8009550:	f107 0108 	add.w	r1, r7, #8
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
      break;
 800955a:	e112      	b.n	8009782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	7c1b      	ldrb	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10d      	bne.n	8009580 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	f107 0208 	add.w	r2, r7, #8
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3301      	adds	r3, #1
 800957a:	2202      	movs	r2, #2
 800957c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800957e:	e100      	b.n	8009782 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	f107 0208 	add.w	r2, r7, #8
 800958c:	4610      	mov	r0, r2
 800958e:	4798      	blx	r3
 8009590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3301      	adds	r3, #1
 8009596:	2202      	movs	r2, #2
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e0f2      	b.n	8009782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	885b      	ldrh	r3, [r3, #2]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	f200 80ac 	bhi.w	8009700 <USBD_GetDescriptor+0x204>
 80095a8:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <USBD_GetDescriptor+0xb4>)
 80095aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ae:	bf00      	nop
 80095b0:	080095c9 	.word	0x080095c9
 80095b4:	080095fd 	.word	0x080095fd
 80095b8:	08009631 	.word	0x08009631
 80095bc:	08009665 	.word	0x08009665
 80095c0:	08009699 	.word	0x08009699
 80095c4:	080096cd 	.word	0x080096cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	7c12      	ldrb	r2, [r2, #16]
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ea:	e091      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 facb 	bl	8009b8a <USBD_CtlError>
            err++;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	3301      	adds	r3, #1
 80095f8:	72fb      	strb	r3, [r7, #11]
          break;
 80095fa:	e089      	b.n	8009710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961e:	e077      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fab1 	bl	8009b8a <USBD_CtlError>
            err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
          break;
 800962e:	e06f      	b.n	8009710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009652:	e05d      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa97 	bl	8009b8a <USBD_CtlError>
            err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
          break;
 8009662:	e055      	b.n	8009710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e043      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa7d 	bl	8009b8a <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e03b      	b.n	8009710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e029      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa63 	bl	8009b8a <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e021      	b.n	8009710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	7c12      	ldrb	r2, [r2, #16]
 80096e4:	f107 0108 	add.w	r1, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ee:	e00f      	b.n	8009710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa49 	bl	8009b8a <USBD_CtlError>
            err++;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3301      	adds	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]
          break;
 80096fe:	e007      	b.n	8009710 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa41 	bl	8009b8a <USBD_CtlError>
          err++;
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	3301      	adds	r3, #1
 800970c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e037      	b.n	8009782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7c1b      	ldrb	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009722:	f107 0208 	add.w	r2, r7, #8
 8009726:	4610      	mov	r0, r2
 8009728:	4798      	blx	r3
 800972a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800972c:	e029      	b.n	8009782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa2a 	bl	8009b8a <USBD_CtlError>
        err++;
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	3301      	adds	r3, #1
 800973a:	72fb      	strb	r3, [r7, #11]
      break;
 800973c:	e021      	b.n	8009782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7c1b      	ldrb	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10d      	bne.n	8009762 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	f107 0208 	add.w	r2, r7, #8
 8009752:	4610      	mov	r0, r2
 8009754:	4798      	blx	r3
 8009756:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	2207      	movs	r2, #7
 800975e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009760:	e00f      	b.n	8009782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa10 	bl	8009b8a <USBD_CtlError>
        err++;
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	3301      	adds	r3, #1
 800976e:	72fb      	strb	r3, [r7, #11]
      break;
 8009770:	e007      	b.n	8009782 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa08 	bl	8009b8a <USBD_CtlError>
      err++;
 800977a:	7afb      	ldrb	r3, [r7, #11]
 800977c:	3301      	adds	r3, #1
 800977e:	72fb      	strb	r3, [r7, #11]
      break;
 8009780:	bf00      	nop
  }

  if (err != 0U)
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11e      	bne.n	80097c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	88db      	ldrh	r3, [r3, #6]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d016      	beq.n	80097be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009790:	893b      	ldrh	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00e      	beq.n	80097b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88da      	ldrh	r2, [r3, #6]
 800979a:	893b      	ldrh	r3, [r7, #8]
 800979c:	4293      	cmp	r3, r2
 800979e:	bf28      	it	cs
 80097a0:	4613      	movcs	r3, r2
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097a6:	893b      	ldrh	r3, [r7, #8]
 80097a8:	461a      	mov	r2, r3
 80097aa:	68f9      	ldr	r1, [r7, #12]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fa5d 	bl	8009c6c <USBD_CtlSendData>
 80097b2:	e009      	b.n	80097c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f9e7 	bl	8009b8a <USBD_CtlError>
 80097bc:	e004      	b.n	80097c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 faae 	bl	8009d20 <USBD_CtlSendStatus>
 80097c4:	e000      	b.n	80097c8 <USBD_GetDescriptor+0x2cc>
    return;
 80097c6:	bf00      	nop
  }
}
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop

080097d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	889b      	ldrh	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d131      	bne.n	8009846 <USBD_SetAddress+0x76>
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	88db      	ldrh	r3, [r3, #6]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d12d      	bne.n	8009846 <USBD_SetAddress+0x76>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	885b      	ldrh	r3, [r3, #2]
 80097ee:	2b7f      	cmp	r3, #127	; 0x7f
 80097f0:	d829      	bhi.n	8009846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	885b      	ldrh	r3, [r3, #2]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d104      	bne.n	8009814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9bc 	bl	8009b8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009812:	e01d      	b.n	8009850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	7bfa      	ldrb	r2, [r7, #15]
 8009818:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fe7d 	bl	800a520 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa7a 	bl	8009d20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2202      	movs	r2, #2
 8009836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	e009      	b.n	8009850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009844:	e004      	b.n	8009850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f99e 	bl	8009b8a <USBD_CtlError>
  }
}
 800984e:	bf00      	nop
 8009850:	bf00      	nop
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	4b4e      	ldr	r3, [pc, #312]	; (80099a8 <USBD_SetConfig+0x150>)
 800986e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009870:	4b4d      	ldr	r3, [pc, #308]	; (80099a8 <USBD_SetConfig+0x150>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d905      	bls.n	8009884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f985 	bl	8009b8a <USBD_CtlError>
    return USBD_FAIL;
 8009880:	2303      	movs	r3, #3
 8009882:	e08c      	b.n	800999e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d002      	beq.n	8009896 <USBD_SetConfig+0x3e>
 8009890:	2b03      	cmp	r3, #3
 8009892:	d029      	beq.n	80098e8 <USBD_SetConfig+0x90>
 8009894:	e075      	b.n	8009982 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009896:	4b44      	ldr	r3, [pc, #272]	; (80099a8 <USBD_SetConfig+0x150>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d020      	beq.n	80098e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800989e:	4b42      	ldr	r3, [pc, #264]	; (80099a8 <USBD_SetConfig+0x150>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098a8:	4b3f      	ldr	r3, [pc, #252]	; (80099a8 <USBD_SetConfig+0x150>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fe ffe1 	bl	8008876 <USBD_SetClassConfig>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d008      	beq.n	80098d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f962 	bl	8009b8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098ce:	e065      	b.n	800999c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa25 	bl	8009d20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2203      	movs	r2, #3
 80098da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098de:	e05d      	b.n	800999c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fa1d 	bl	8009d20 <USBD_CtlSendStatus>
      break;
 80098e6:	e059      	b.n	800999c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098e8:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <USBD_SetConfig+0x150>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d112      	bne.n	8009916 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098f8:	4b2b      	ldr	r3, [pc, #172]	; (80099a8 <USBD_SetConfig+0x150>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009902:	4b29      	ldr	r3, [pc, #164]	; (80099a8 <USBD_SetConfig+0x150>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7fe ffd0 	bl	80088ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa06 	bl	8009d20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009914:	e042      	b.n	800999c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009916:	4b24      	ldr	r3, [pc, #144]	; (80099a8 <USBD_SetConfig+0x150>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	429a      	cmp	r2, r3
 8009922:	d02a      	beq.n	800997a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7fe ffbe 	bl	80088ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009932:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <USBD_SetConfig+0x150>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800993c:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <USBD_SetConfig+0x150>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fe ff97 	bl	8008876 <USBD_SetClassConfig>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00f      	beq.n	8009972 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f918 	bl	8009b8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7fe ffa3 	bl	80088ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009970:	e014      	b.n	800999c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9d4 	bl	8009d20 <USBD_CtlSendStatus>
      break;
 8009978:	e010      	b.n	800999c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9d0 	bl	8009d20 <USBD_CtlSendStatus>
      break;
 8009980:	e00c      	b.n	800999c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f900 	bl	8009b8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <USBD_SetConfig+0x150>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7fe ff8c 	bl	80088ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009996:	2303      	movs	r3, #3
 8009998:	73fb      	strb	r3, [r7, #15]
      break;
 800999a:	bf00      	nop
  }

  return ret;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000350 	.word	0x20000350

080099ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d004      	beq.n	80099c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f8e2 	bl	8009b8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099c6:	e023      	b.n	8009a10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	dc02      	bgt.n	80099da <USBD_GetConfig+0x2e>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dc03      	bgt.n	80099e0 <USBD_GetConfig+0x34>
 80099d8:	e015      	b.n	8009a06 <USBD_GetConfig+0x5a>
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d00b      	beq.n	80099f6 <USBD_GetConfig+0x4a>
 80099de:	e012      	b.n	8009a06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3308      	adds	r3, #8
 80099ea:	2201      	movs	r2, #1
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f93c 	bl	8009c6c <USBD_CtlSendData>
        break;
 80099f4:	e00c      	b.n	8009a10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3304      	adds	r3, #4
 80099fa:	2201      	movs	r2, #1
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f934 	bl	8009c6c <USBD_CtlSendData>
        break;
 8009a04:	e004      	b.n	8009a10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f8be 	bl	8009b8a <USBD_CtlError>
        break;
 8009a0e:	bf00      	nop
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d81e      	bhi.n	8009a6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d004      	beq.n	8009a42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f8a5 	bl	8009b8a <USBD_CtlError>
        break;
 8009a40:	e01a      	b.n	8009a78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f043 0202 	orr.w	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	330c      	adds	r3, #12
 8009a62:	2202      	movs	r2, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f900 	bl	8009c6c <USBD_CtlSendData>
      break;
 8009a6c:	e004      	b.n	8009a78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f88a 	bl	8009b8a <USBD_CtlError>
      break;
 8009a76:	bf00      	nop
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d107      	bne.n	8009aa2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f940 	bl	8009d20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009aa0:	e013      	b.n	8009aca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d10b      	bne.n	8009ac2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	889b      	ldrh	r3, [r3, #4]
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f930 	bl	8009d20 <USBD_CtlSendStatus>
}
 8009ac0:	e003      	b.n	8009aca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f860 	bl	8009b8a <USBD_CtlError>
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d80b      	bhi.n	8009b02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d10c      	bne.n	8009b0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f910 	bl	8009d20 <USBD_CtlSendStatus>
      }
      break;
 8009b00:	e004      	b.n	8009b0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f840 	bl	8009b8a <USBD_CtlError>
      break;
 8009b0a:	e000      	b.n	8009b0e <USBD_ClrFeature+0x3c>
      break;
 8009b0c:	bf00      	nop
  }
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fa41 	bl	8008fc8 <SWAPBYTE>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3301      	adds	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff fa34 	bl	8008fc8 <SWAPBYTE>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3301      	adds	r3, #1
 8009b72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fa27 	bl	8008fc8 <SWAPBYTE>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	80da      	strh	r2, [r3, #6]
}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b94:	2180      	movs	r1, #128	; 0x80
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fc58 	bl	800a44c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fc54 	bl	800a44c <USBD_LL_StallEP>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d036      	beq.n	8009c30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bc6:	6938      	ldr	r0, [r7, #16]
 8009bc8:	f000 f836 	bl	8009c38 <USBD_GetLen>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	3301      	adds	r3, #1
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	4413      	add	r3, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7812      	ldrb	r2, [r2, #0]
 8009be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	3301      	adds	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bfc:	e013      	b.n	8009c26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	4413      	add	r3, r2
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	7812      	ldrb	r2, [r2, #0]
 8009c08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	3301      	adds	r3, #1
 8009c14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	3301      	adds	r3, #1
 8009c24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e7      	bne.n	8009bfe <USBD_GetString+0x52>
 8009c2e:	e000      	b.n	8009c32 <USBD_GetString+0x86>
    return;
 8009c30:	bf00      	nop
  }
}
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c48:	e005      	b.n	8009c56 <USBD_GetLen+0x1e>
  {
    len++;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1f5      	bne.n	8009c4a <USBD_GetLen+0x12>
  }

  return len;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	2100      	movs	r1, #0
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fc63 	bl	800a55e <USBD_LL_Transmit>

  return USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 fc52 	bl	800a55e <USBD_LL_Transmit>

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	2100      	movs	r1, #0
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 fc56 	bl	800a5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fc45 	bl	800a5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d30:	2300      	movs	r3, #0
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fc11 	bl	800a55e <USBD_LL_Transmit>

  return USBD_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2205      	movs	r2, #5
 8009d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d56:	2300      	movs	r3, #0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fc1f 	bl	800a5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d70:	2200      	movs	r2, #0
 8009d72:	4912      	ldr	r1, [pc, #72]	; (8009dbc <MX_USB_DEVICE_Init+0x50>)
 8009d74:	4812      	ldr	r0, [pc, #72]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d76:	f7fe fd01 	bl	800877c <USBD_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d80:	f7f7 f966 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009d84:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <MX_USB_DEVICE_Init+0x58>)
 8009d86:	480e      	ldr	r0, [pc, #56]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d88:	f7fe fd28 	bl	80087dc <USBD_RegisterClass>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d92:	f7f7 f95d 	bl	8001050 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009d96:	490c      	ldr	r1, [pc, #48]	; (8009dc8 <MX_USB_DEVICE_Init+0x5c>)
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d9a:	f7fe fcd5 	bl	8008748 <USBD_CUSTOM_HID_RegisterInterface>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009da4:	f7f7 f954 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009daa:	f7fe fd4d 	bl	8008848 <USBD_Start>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009db4:	f7f7 f94c 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009db8:	bf00      	nop
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200000bc 	.word	0x200000bc
 8009dc0:	20000354 	.word	0x20000354
 8009dc4:	2000000c 	.word	0x2000000c
 8009dc8:	200000ac 	.word	0x200000ac

08009dcc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009de0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	460a      	mov	r2, r1
 8009df6:	71fb      	strb	r3, [r7, #7]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	UNUSED(event_idx);
	UNUSED(state);

	/* Start next USB packet transfer once data processing is completed */
	USBD_CUSTOM_HID_HandleTypeDef *hhid =
 8009dfc:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <CUSTOM_HID_OutEvent_FS+0x54>)
 8009dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e02:	60bb      	str	r3, [r7, #8]
			(USBD_CUSTOM_HID_HandleTypeDef*) hUsbDeviceFS.pClassData;

	for (uint8_t i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
 8009e08:	e008      	b.n	8009e1c <CUSTOM_HID_OutEvent_FS+0x30>
		USB_RX_Buffer[i] = hhid->Report_buf[i];  //to read usb data from pc
 8009e0a:	7bfa      	ldrb	r2, [r7, #15]
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	5c89      	ldrb	r1, [r1, r2]
 8009e12:	4a0c      	ldr	r2, [pc, #48]	; (8009e44 <CUSTOM_HID_OutEvent_FS+0x58>)
 8009e14:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < USBD_CUSTOMHID_OUTREPORT_BUF_SIZE; i++) {
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	2b3f      	cmp	r3, #63	; 0x3f
 8009e20:	d9f3      	bls.n	8009e0a <CUSTOM_HID_OutEvent_FS+0x1e>
	}

	if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t) USBD_OK) {
 8009e22:	4807      	ldr	r0, [pc, #28]	; (8009e40 <CUSTOM_HID_OutEvent_FS+0x54>)
 8009e24:	f7fe fc2e 	bl	8008684 <USBD_CUSTOM_HID_ReceivePacket>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <CUSTOM_HID_OutEvent_FS+0x48>
		return -1;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	e000      	b.n	8009e36 <CUSTOM_HID_OutEvent_FS+0x4a>
	}

	return (USBD_OK);
 8009e34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000354 	.word	0x20000354
 8009e44:	200002ac 	.word	0x200002ac

08009e48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2212      	movs	r2, #18
 8009e58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	; (8009e68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	200000d8 	.word	0x200000d8

08009e6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	6039      	str	r1, [r7, #0]
 8009e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e7e:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	200000ec 	.word	0x200000ec

08009e90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	6039      	str	r1, [r7, #0]
 8009e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4907      	ldr	r1, [pc, #28]	; (8009ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ea6:	4808      	ldr	r0, [pc, #32]	; (8009ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ea8:	f7ff fe80 	bl	8009bac <USBD_GetString>
 8009eac:	e004      	b.n	8009eb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	4904      	ldr	r1, [pc, #16]	; (8009ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009eb2:	4805      	ldr	r0, [pc, #20]	; (8009ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009eb4:	f7ff fe7a 	bl	8009bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eb8:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000630 	.word	0x20000630
 8009ec8:	0800a6f8 	.word	0x0800a6f8

08009ecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	4904      	ldr	r1, [pc, #16]	; (8009eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009edc:	4804      	ldr	r0, [pc, #16]	; (8009ef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ede:	f7ff fe65 	bl	8009bac <USBD_GetString>
  return USBD_StrDesc;
 8009ee2:	4b02      	ldr	r3, [pc, #8]	; (8009eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000630 	.word	0x20000630
 8009ef0:	0800a718 	.word	0x0800a718

08009ef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	6039      	str	r1, [r7, #0]
 8009efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	221a      	movs	r2, #26
 8009f04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f06:	f000 f843 	bl	8009f90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f0a:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	200000f0 	.word	0x200000f0

08009f18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	6039      	str	r1, [r7, #0]
 8009f22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4907      	ldr	r1, [pc, #28]	; (8009f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f2e:	4808      	ldr	r0, [pc, #32]	; (8009f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f30:	f7ff fe3c 	bl	8009bac <USBD_GetString>
 8009f34:	e004      	b.n	8009f40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	4904      	ldr	r1, [pc, #16]	; (8009f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f3a:	4805      	ldr	r0, [pc, #20]	; (8009f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f3c:	f7ff fe36 	bl	8009bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f40:	4b02      	ldr	r3, [pc, #8]	; (8009f4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000630 	.word	0x20000630
 8009f50:	0800a72c 	.word	0x0800a72c

08009f54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f6a:	4808      	ldr	r0, [pc, #32]	; (8009f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f6c:	f7ff fe1e 	bl	8009bac <USBD_GetString>
 8009f70:	e004      	b.n	8009f7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f78:	f7ff fe18 	bl	8009bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20000630 	.word	0x20000630
 8009f8c:	0800a740 	.word	0x0800a740

08009f90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <Get_SerialNum+0x44>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f9c:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <Get_SerialNum+0x48>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <Get_SerialNum+0x4c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4413      	add	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	4909      	ldr	r1, [pc, #36]	; (8009fe0 <Get_SerialNum+0x50>)
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f814 	bl	8009fe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	4908      	ldr	r1, [pc, #32]	; (8009fe4 <Get_SerialNum+0x54>)
 8009fc4:	68b8      	ldr	r0, [r7, #8]
 8009fc6:	f000 f80f 	bl	8009fe8 <IntToUnicode>
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	1fff7a10 	.word	0x1fff7a10
 8009fd8:	1fff7a14 	.word	0x1fff7a14
 8009fdc:	1fff7a18 	.word	0x1fff7a18
 8009fe0:	200000f2 	.word	0x200000f2
 8009fe4:	20000102 	.word	0x20000102

08009fe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e027      	b.n	800a050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	0f1b      	lsrs	r3, r3, #28
 800a004:	2b09      	cmp	r3, #9
 800a006:	d80b      	bhi.n	800a020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	0f1b      	lsrs	r3, r3, #28
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4619      	mov	r1, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	440b      	add	r3, r1
 800a018:	3230      	adds	r2, #48	; 0x30
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e00a      	b.n	800a036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	0f1b      	lsrs	r3, r3, #28
 800a024:	b2da      	uxtb	r2, r3
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4619      	mov	r1, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	440b      	add	r3, r1
 800a030:	3237      	adds	r2, #55	; 0x37
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	3301      	adds	r3, #1
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	4413      	add	r3, r2
 800a046:	2200      	movs	r2, #0
 800a048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	3301      	adds	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]
 800a050:	7dfa      	ldrb	r2, [r7, #23]
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	429a      	cmp	r2, r3
 800a056:	d3d3      	bcc.n	800a000 <IntToUnicode+0x18>
  }
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
	...

0800a068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a070:	f107 0314 	add.w	r3, r7, #20
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	605a      	str	r2, [r3, #4]
 800a07a:	609a      	str	r2, [r3, #8]
 800a07c:	60da      	str	r2, [r3, #12]
 800a07e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a088:	d13a      	bne.n	800a100 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a08a:	2300      	movs	r3, #0
 800a08c:	613b      	str	r3, [r7, #16]
 800a08e:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a092:	4a1d      	ldr	r2, [pc, #116]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a094:	f043 0301 	orr.w	r3, r3, #1
 800a098:	6313      	str	r3, [r2, #48]	; 0x30
 800a09a:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0b8:	230a      	movs	r3, #10
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0bc:	f107 0314 	add.w	r3, r7, #20
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4812      	ldr	r0, [pc, #72]	; (800a10c <HAL_PCD_MspInit+0xa4>)
 800a0c4:	f7f7 ff82 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a0c8:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0cc:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	6353      	str	r3, [r2, #52]	; 0x34
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0dc:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a0de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0e2:	6453      	str	r3, [r2, #68]	; 0x44
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <HAL_PCD_MspInit+0xa0>)
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	2043      	movs	r0, #67	; 0x43
 800a0f6:	f7f7 ff32 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0fa:	2043      	movs	r0, #67	; 0x43
 800a0fc:	f7f7 ff4b 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a100:	bf00      	nop
 800a102:	3728      	adds	r7, #40	; 0x28
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	40023800 	.word	0x40023800
 800a10c:	40020000 	.word	0x40020000

0800a110 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7fe fbdb 	bl	80088e2 <USBD_LL_SetupStage>
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a146:	78fa      	ldrb	r2, [r7, #3]
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	4619      	mov	r1, r3
 800a15e:	f7fe fc15 	bl	800898c <USBD_LL_DataOutStage>
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	460b      	mov	r3, r1
 800a174:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	3320      	adds	r3, #32
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	4619      	mov	r1, r3
 800a192:	f7fe fcae 	bl	8008af2 <USBD_LL_DataInStage>
}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fde8 	bl	8008d82 <USBD_LL_SOF>
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	79db      	ldrb	r3, [r3, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
 800a1d2:	e008      	b.n	800a1e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	79db      	ldrb	r3, [r3, #7]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d102      	bne.n	800a1e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	73fb      	strb	r3, [r7, #15]
 800a1e0:	e001      	b.n	800a1e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a1e2:	f7f6 ff35 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a1ec:	7bfa      	ldrb	r2, [r7, #15]
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fd82 	bl	8008cfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe fd2a 	bl	8008c56 <USBD_LL_Reset>
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fd7d 	bl	8008d1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7adb      	ldrb	r3, [r3, #11]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <HAL_PCD_SuspendCallback+0x48>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	4a03      	ldr	r2, [pc, #12]	; (800a254 <HAL_PCD_SuspendCallback+0x48>)
 800a246:	f043 0306 	orr.w	r3, r3, #6
 800a24a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	e000ed00 	.word	0xe000ed00

0800a258 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe fd73 	bl	8008d52 <USBD_LL_Resume>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe fdcb 	bl	8008e26 <USBD_LL_IsoOUTIncomplete>
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fd87 	bl	8008dc2 <USBD_LL_IsoINIncomplete>
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fddd 	bl	8008e8a <USBD_LL_DevConnected>
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fdda 	bl	8008ea0 <USBD_LL_DevDisconnected>
}
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d13c      	bne.n	800a37e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a304:	4a20      	ldr	r2, [pc, #128]	; (800a388 <USBD_LL_Init+0x94>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a1e      	ldr	r2, [pc, #120]	; (800a388 <USBD_LL_Init+0x94>)
 800a310:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a314:	4b1c      	ldr	r3, [pc, #112]	; (800a388 <USBD_LL_Init+0x94>)
 800a316:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a31a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a31c:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <USBD_LL_Init+0x94>)
 800a31e:	2204      	movs	r2, #4
 800a320:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a322:	4b19      	ldr	r3, [pc, #100]	; (800a388 <USBD_LL_Init+0x94>)
 800a324:	2202      	movs	r2, #2
 800a326:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a328:	4b17      	ldr	r3, [pc, #92]	; (800a388 <USBD_LL_Init+0x94>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a32e:	4b16      	ldr	r3, [pc, #88]	; (800a388 <USBD_LL_Init+0x94>)
 800a330:	2202      	movs	r2, #2
 800a332:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a334:	4b14      	ldr	r3, [pc, #80]	; (800a388 <USBD_LL_Init+0x94>)
 800a336:	2200      	movs	r2, #0
 800a338:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <USBD_LL_Init+0x94>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a340:	4b11      	ldr	r3, [pc, #68]	; (800a388 <USBD_LL_Init+0x94>)
 800a342:	2200      	movs	r2, #0
 800a344:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <USBD_LL_Init+0x94>)
 800a348:	2200      	movs	r2, #0
 800a34a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a34c:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <USBD_LL_Init+0x94>)
 800a34e:	2200      	movs	r2, #0
 800a350:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a352:	480d      	ldr	r0, [pc, #52]	; (800a388 <USBD_LL_Init+0x94>)
 800a354:	f7f8 ffea 	bl	800332c <HAL_PCD_Init>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a35e:	f7f6 fe77 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a362:	2180      	movs	r1, #128	; 0x80
 800a364:	4808      	ldr	r0, [pc, #32]	; (800a388 <USBD_LL_Init+0x94>)
 800a366:	f7fa f9fc 	bl	8004762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a36a:	2240      	movs	r2, #64	; 0x40
 800a36c:	2100      	movs	r1, #0
 800a36e:	4806      	ldr	r0, [pc, #24]	; (800a388 <USBD_LL_Init+0x94>)
 800a370:	f7fa f9b0 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a374:	2280      	movs	r2, #128	; 0x80
 800a376:	2101      	movs	r1, #1
 800a378:	4803      	ldr	r0, [pc, #12]	; (800a388 <USBD_LL_Init+0x94>)
 800a37a:	f7fa f9ab 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000830 	.word	0x20000830

0800a38c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7f9 f8d1 	bl	800354a <HAL_PCD_Start>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f930 	bl	800a614 <USBD_Get_USB_Status>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	70fb      	strb	r3, [r7, #3]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70bb      	strb	r3, [r7, #2]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3ea:	78bb      	ldrb	r3, [r7, #2]
 800a3ec:	883a      	ldrh	r2, [r7, #0]
 800a3ee:	78f9      	ldrb	r1, [r7, #3]
 800a3f0:	f7f9 fda5 	bl	8003f3e <HAL_PCD_EP_Open>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 f90a 	bl	800a614 <USBD_Get_USB_Status>
 800a400:	4603      	mov	r3, r0
 800a402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a404:	7bbb      	ldrb	r3, [r7, #14]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	460b      	mov	r3, r1
 800a418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7f9 fdee 	bl	800400e <HAL_PCD_EP_Close>
 800a432:	4603      	mov	r3, r0
 800a434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f8eb 	bl	800a614 <USBD_Get_USB_Status>
 800a43e:	4603      	mov	r3, r0
 800a440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a442:	7bbb      	ldrb	r3, [r7, #14]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a466:	78fa      	ldrb	r2, [r7, #3]
 800a468:	4611      	mov	r1, r2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7f9 fe8e 	bl	800418c <HAL_PCD_EP_SetStall>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	4618      	mov	r0, r3
 800a478:	f000 f8cc 	bl	800a614 <USBD_Get_USB_Status>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a480:	7bbb      	ldrb	r3, [r7, #14]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7f9 fed2 	bl	8004252 <HAL_PCD_EP_ClrStall>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f8ad 	bl	800a614 <USBD_Get_USB_Status>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	da0b      	bge.n	800a4fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4ea:	68f9      	ldr	r1, [r7, #12]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	3316      	adds	r3, #22
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	e00b      	b.n	800a514 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	4613      	mov	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a512:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f9 fcd9 	bl	8003ef6 <HAL_PCD_SetAddress>
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f862 	bl	800a614 <USBD_Get_USB_Status>
 800a550:	4603      	mov	r3, r0
 800a552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a554:	7bbb      	ldrb	r3, [r7, #14]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b086      	sub	sp, #24
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
 800a56a:	460b      	mov	r3, r1
 800a56c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a57c:	7af9      	ldrb	r1, [r7, #11]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	f7f9 fdc9 	bl	8004118 <HAL_PCD_EP_Transmit>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f841 	bl	800a614 <USBD_Get_USB_Status>
 800a592:	4603      	mov	r3, r0
 800a594:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a596:	7dbb      	ldrb	r3, [r7, #22]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5be:	7af9      	ldrb	r1, [r7, #11]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	f7f9 fd6d 	bl	80040a2 <HAL_PCD_EP_Receive>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f820 	bl	800a614 <USBD_Get_USB_Status>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a5ec:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <USBD_static_malloc+0x18>)
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000d14 	.word	0x20000d14

0800a600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	2b03      	cmp	r3, #3
 800a626:	d817      	bhi.n	800a658 <USBD_Get_USB_Status+0x44>
 800a628:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <USBD_Get_USB_Status+0x1c>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a647 	.word	0x0800a647
 800a638:	0800a64d 	.word	0x0800a64d
 800a63c:	0800a653 	.word	0x0800a653
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
    break;
 800a644:	e00b      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a646:	2303      	movs	r3, #3
 800a648:	73fb      	strb	r3, [r7, #15]
    break;
 800a64a:	e008      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
    break;
 800a650:	e005      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a652:	2303      	movs	r3, #3
 800a654:	73fb      	strb	r3, [r7, #15]
    break;
 800a656:	e002      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a658:	2303      	movs	r3, #3
 800a65a:	73fb      	strb	r3, [r7, #15]
    break;
 800a65c:	bf00      	nop
  }
  return usb_status;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <memset>:
 800a66c:	4402      	add	r2, r0
 800a66e:	4603      	mov	r3, r0
 800a670:	4293      	cmp	r3, r2
 800a672:	d100      	bne.n	800a676 <memset+0xa>
 800a674:	4770      	bx	lr
 800a676:	f803 1b01 	strb.w	r1, [r3], #1
 800a67a:	e7f9      	b.n	800a670 <memset+0x4>

0800a67c <__libc_init_array>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4d0d      	ldr	r5, [pc, #52]	; (800a6b4 <__libc_init_array+0x38>)
 800a680:	4c0d      	ldr	r4, [pc, #52]	; (800a6b8 <__libc_init_array+0x3c>)
 800a682:	1b64      	subs	r4, r4, r5
 800a684:	10a4      	asrs	r4, r4, #2
 800a686:	2600      	movs	r6, #0
 800a688:	42a6      	cmp	r6, r4
 800a68a:	d109      	bne.n	800a6a0 <__libc_init_array+0x24>
 800a68c:	4d0b      	ldr	r5, [pc, #44]	; (800a6bc <__libc_init_array+0x40>)
 800a68e:	4c0c      	ldr	r4, [pc, #48]	; (800a6c0 <__libc_init_array+0x44>)
 800a690:	f000 f818 	bl	800a6c4 <_init>
 800a694:	1b64      	subs	r4, r4, r5
 800a696:	10a4      	asrs	r4, r4, #2
 800a698:	2600      	movs	r6, #0
 800a69a:	42a6      	cmp	r6, r4
 800a69c:	d105      	bne.n	800a6aa <__libc_init_array+0x2e>
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a4:	4798      	blx	r3
 800a6a6:	3601      	adds	r6, #1
 800a6a8:	e7ee      	b.n	800a688 <__libc_init_array+0xc>
 800a6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ae:	4798      	blx	r3
 800a6b0:	3601      	adds	r6, #1
 800a6b2:	e7f2      	b.n	800a69a <__libc_init_array+0x1e>
 800a6b4:	0800a778 	.word	0x0800a778
 800a6b8:	0800a778 	.word	0x0800a778
 800a6bc:	0800a778 	.word	0x0800a778
 800a6c0:	0800a77c 	.word	0x0800a77c

0800a6c4 <_init>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr

0800a6d0 <_fini>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr
